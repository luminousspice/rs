<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on the Right Stuff</title>
    <link>http://rs.luminousspice.com/tags/python/</link>
    <description>Python | the Right Stuff</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 02 Apr 2016 20:03:15 +0900</lastBuildDate>
    <atom:link href="https://pubsubhubbub.superfeedr.com" rel="hub"/>
    <atom:link href="https://pubsubhubbub.appspot.com/" rel="hub"/>
    <atom:link href="http://rs.luminousspice.com/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Anki のメディアプレイヤーを mpv に取り替える</title>
      <link>http://rs.luminousspice.com/mpv-on-anki/</link>
      <pubDate>Sat, 02 Apr 2016 20:03:15 +0900</pubDate>
      <guid>http://rs.luminousspice.com/mpv-on-anki/</guid>
      <description>Anki はメディアプレイヤーをカスタマイズためのインターフェイスを持っていて、作者が用意したアドオンを使って標準の MPlayer から簡単に取り替えることができます。高機能な軽量動画プレイヤーの mpv を例に取り上げて、その設定方法を説明します。</description>
      <content>&lt;div id=&#34;preamble&#34;&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;Anki はメディアプレイヤーをカスタマイズためのインターフェイスを持っていて、作者が用意したアドオンを使って標準の MPlayer から簡単に取り替えることができます。高機能な軽量動画プレイヤーの mpv を例に取り上げて、その設定方法を説明します。&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_anki_はメディアプレイヤーのカスタマイズを前提に作っていた&#34;&gt;Anki はメディアプレイヤーのカスタマイズを前提に作っていた&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;Anki のメディアプレイヤーを MPlayer から変更するのに、HTML5 Video 要素を利用する方法を &lt;a href=&#34;http://rs.luminousspice.com/html5-on-anki/&#34;&gt;HTML5 を利用した Anki カードへのメディアの埋め込み&lt;/a&gt; で以前取り上げました。今回は、メディアプレイヤー自体を取り替える方法を紹介します。
コマンドラインで呼び出せるプレイヤーであれば、自分好みのアプリに設定できます。
なお、OS X 版を前提として説明を進めます。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;最近 reddit で &lt;a href=&#34;https://www.reddit.com/r/Anki/comments/4c1ihg/does_anyone_use_vlc_with_anki/&#34;&gt;Does anyone use VLC with Anki?&lt;/a&gt; という面白い投稿を見つけました。MPlayer を VLC media player に変更する方法を取り上げています。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;何がそんなに面白いかと言うと、Anki は、ユーザーがメディアプレイヤーを自由に変更することを前提に作っていることです。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;Anki はメディアプレイヤーをカスタマイズするインターフェイスを標準で持っています。その使い方を Anki の作者が純正アドオン &lt;a href=&#34;https://github.com/dae/ankiplugins/blob/master/customPlayer.py&#34;&gt;customPlayer.py&lt;/a&gt; を公開している説明していて、先ほどの投稿の中でも利用していました。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;そこで mpv を一つ具体例に取り上げて、Anki のメディアプレイヤーの交換方法を紹介したいと思います。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;&lt;strong&gt;参考:&lt;/strong&gt; &lt;a href=&#34;https://github.com/dae/anki/blob/master/anki/sound.py&#34;&gt;anki/sound.py&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_アドオンの設定方法&#34;&gt;アドオンの設定方法&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;このアドオン &lt;a href=&#34;https://github.com/dae/ankiplugins/blob/master/customPlayer.py&#34;&gt;customPlayer.py&lt;/a&gt; の使い方は、変更すべき箇所の直前のコメント中に書き込まれています。
初期設定 MPlayer の内容がコメントアウトで残されているので、引数の設定の参考にしてください。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;title&#34;&gt;customPlayer.py 変更箇所&lt;/div&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;&lt;tt&gt;# change &#39;customPlayer&#39; to the player you want
#externalPlayer = [&#34;mplayer&#34;, &#34;-really-quiet&#34;]
externalPlayer = [&#34;customPlayer&#34;]&lt;/tt&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;具体的な設定方法は、｀externalPlayer = [&#34;customPlayer&#34;]` の &lt;tt&gt;customPlayer&lt;/tt&gt; を使いたいアプリのコマンドで置き換えます。
mpv に変更したい場合は、次のように指定します。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;title&#34;&gt;mpv に交換する設定例&lt;/div&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;&lt;tt&gt;externalPlayer = [&#34;mpv&#34;]&lt;/tt&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;変更したアドオンを、アドオンフォルダーに移動して Anki を再起動すると、新しいメディアプレイヤーが機能するようになります。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_その他のアプリへの設定例&#34;&gt;その他のアプリへの設定例&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;先ほどの参考情報の VLC や、Quick Look に交換することもできます。高音質な音声を聴きたいなら afplay を指定することもできます。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;title&#34;&gt;VLC media player の場合&lt;/div&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;&lt;tt&gt;externalPlayer = [&#34;/Applications/VLC.app/Contents/MacOS/VLC&#34;, &#34;--video-on-top&#34;, &#34;--play-and-exit&#34;]&lt;/tt&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Quick Look の場合&lt;/div&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;&lt;tt&gt;externalPlayer = [&#34;qlmanage&#34;, &#34;-p&#34;]&lt;/tt&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;title&#34;&gt;afplay の場合 (高音質設定)&lt;/div&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;&lt;tt&gt;externalPlayer = [&#34;afplay&#34;,&#34;-q&#34;,&#34;1&#34;]&lt;/tt&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;ここまで分かれば、セレクターを使って切り替えるとか、ノートからメディアプレイヤーを指定するとかアドオンのアイデアが沸いてきてお楽しみが増えますね。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;Anki はユーザーがカスタマイズすることを前提に作られていて、いろいろな場所にその糸口が見つかります。
自分の好みに調節してさらに使いやすくするという Anki の楽しみ方も体験していただけたらと思います。&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
    </item>
    
    <item>
      <title>フックを使った Anki アドオンのつくり方</title>
      <link>http://rs.luminousspice.com/how_to_create_anki_add-ons/</link>
      <pubDate>Fri, 17 Jan 2014 22:55:53 +0900</pubDate>
      <guid>http://rs.luminousspice.com/how_to_create_anki_add-ons/</guid>
      <description>Anki は、アドオンを作成することで、標準機能を拡張したり、変更したりすることが出来ます。このアドオンの作成を簡単にするために、Anki はフック (Hook) という機能を提供しています。Anki の本体機能にカスタムのフックを追加し、機能拡張するアドオンを作成する方法を簡単に説明します。復習後、熟知になったノートにタグを付けるアドオンを開発します。Simple tutorial to create Anki Add-ons for developer with an custom hook.</description>
      <content>&lt;section id=&#34;preamble&#34;&gt;
&lt;p&gt;Anki は、アドオンを作成することで、標準機能を拡張したり、変更したりすることができます。このアドオンの作成を簡単にするために、Anki はフック (Hook) という機能を提供しています。フックを使うと標準機能の中に簡単に外部の関数を組み込むことができます。この記事では更に進んで Anki の標準のフックがない場所にカスタムのフックを追加し、機能拡張するアドオンを作成する方法を簡単に説明します。復習後、熟知になったノートにタグを付けるアドオンを開発します。オフィシャルドキュメント「Anki 2.0 アドオンの作成」を補足する内容です。&lt;/p&gt;
&lt;p&gt;この記事は、АnkiWeb に公開済みの Аnki アドオン (Add-on) &lt;a href=&#34;https://ankiweb.net/shared/info/1299246957&#34; target=&#34;_new&#34;&gt;Mature Tag&lt;/a&gt;を例にとって、解説します。
完成品をインストールして動作させることができますし、ソースコードを見ることもできます。最後に作成したアドオンを AnkiWeb の共有アドオン一覧に登録する方法を紹介します。&lt;/p&gt;
&lt;p&gt;アドオンのインストール方法は、&lt;a href=&#34;http://rs.luminousspice.com/how-to-use-shared-resources/&#34;&gt;Ankiの共有リソースを使ってみる&lt;/a&gt;で紹介しています。&lt;/p&gt;
&lt;p&gt;また、ソースコードの表示方法は、インストールが完了した後、メニューバーの[ツール]-[アドオン]-[Mature_Tag]-[編集&amp;#8230;]を選択してください。&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&#34;前提知識&#34;&gt;
  &lt;div class=&#34;page-header&#34;&gt;
    &lt;h2&gt;前提知識&lt;/h2&gt;
  &lt;/div&gt;
&lt;p&gt;この記事の内容を理解するには、次の知識が必要です。&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Anki の操作方法
特に、Anki というアプリケーションの機能を十分理解した上での操作方法の習熟は必須です。
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Python による開発経験
他の開発言語の経験でも構いませんが、自分で資料を読み Python の開発方法を学べる能力は必要です。
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://rs.luminousspice.com/anki2addons/&#34;&gt;Anki 2.0 アドオンの作成&lt;/a&gt;の内容理解
本文中のサンプルコードを実際に動かしてアドオンを作成する経験があると理解に役立ちます。
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;この記事の最後に &lt;a href=&#34;#review&#34;&gt;Anki アドオン開発のおさらい&lt;/a&gt; という項目を設けて、必要な知識をまとめています。&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&#34;つくるアドオンの要件&#34;&gt;
  &lt;div class=&#34;page-header&#34;&gt;
    &lt;h2&gt;つくるアドオンの要件&lt;/h2&gt;
  &lt;/div&gt;
&lt;p&gt;まず最初にアドオンの要件を決めておきます。&lt;/p&gt;
&lt;p&gt;「復習が終わったら、新たに設定した復習間隔を調べ、熟知なら &#34;Mature&#34; というタグをノートに追加し、それ以外なら  &#34;Mature&#34; を削除します。」&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&#34;モジュールのインポート&#34;&gt;
  &lt;div class=&#34;page-header&#34;&gt;
    &lt;h2&gt;モジュールのインポート&lt;/h2&gt;
  &lt;/div&gt;
&lt;p&gt;最初に必要なモジュールをインポートします。
Anki の復習で解答した時の処理は &lt;a href=&#34;https://github.com/dae/anki/blob/master/anki/sched.py&#34; target=&#34;_new&#34;&gt;sched.py&lt;/a&gt; の中のクラス &lt;code&gt;Scheduler&lt;/code&gt; のメソッド &lt;code&gt;answerCard&lt;/code&gt; で記述しています。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;strong&gt;from&lt;/strong&gt; anki.sched &lt;strong&gt;import&lt;/strong&gt; Scheduler&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;残念ながら復習に関する処理の中にフック (Hook) は存在しません。そこで独自のフックをこのメソッドの最後に追加します。
フックの設置、呼び出しに必要なモジュールをインポートします。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;strong&gt;from&lt;/strong&gt; anki.hooks &lt;strong&gt;import&lt;/strong&gt; addHook, runHook, wrap&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;もちろん &lt;code&gt;answerCard&lt;/code&gt; を書き換えることもできますが、今回の様な条件では独自フックの設置したほうが簡単に記述できます。&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&#34;復習の解答後に処理するフックを設置する&#34;&gt;
  &lt;div class=&#34;page-header&#34;&gt;
    &lt;h2&gt;復習の解答後に処理するフックを設置する&lt;/h2&gt;
  &lt;/div&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;まず、独自のフック &#34;anseweredRevCard&#34; を追加する関数 &lt;code&gt;newAnswerCard()&lt;/code&gt; を定義します。
runHook() はフックを新たに設置する標準の関数です。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;strong&gt;def&lt;/strong&gt; newAnswerCard(self, card, ease):
    runHook(&#39;anseweredRevCard&#39;, self, card)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次に標準の &lt;code&gt;wrap()&lt;/code&gt; 関数を使って、&lt;code&gt;answerCard&lt;/code&gt; の後に &lt;code&gt;newAnswerCard&lt;/code&gt; の内容を追加する処理を記述します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;Scheduler.answerCard = wrap(Scheduler.answerCard, newAnswerCard)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;すると &lt;code&gt;answerCard&lt;/code&gt; の最後に次の行が追加されます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;runHook(&#39;anseweredRevCard&#39;, self, card)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで、復習で解凍した後に処理を呼び出すフックを設置できました。&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&#34;タグを追加_削除する&#34;&gt;
  &lt;div class=&#34;page-header&#34;&gt;
    &lt;h2&gt;タグを追加、削除する&lt;/h2&gt;
  &lt;/div&gt;
&lt;p&gt;復習が終わったら、復習間隔を調べ 21 日以上であったら、&#34;Mature&#34; タグを追加し、それ以外の場合は削除する関数　&lt;code&gt;matureCheck()&lt;/code&gt; を定義します。
熟知の基準日数は変数 &lt;code&gt;threshold&lt;/code&gt; に、設定するタグ文字列は変数 &lt;code&gt;MatureTag&lt;/code&gt; に設定しました。
タグをノートに追加するには &lt;code&gt;Note&lt;/code&gt; クラスのメソッド &lt;code&gt;addTag()&lt;/code&gt; を、削除するには &lt;code&gt;delTag()&lt;/code&gt; を使います。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;i&gt;# Threshold interval for tagging&lt;/i&gt;
threshold = 21
&lt;i&gt;# Tag string for mature note&lt;/i&gt;
MatureTag = u&#34;Mature&#34;

&lt;strong&gt;def&lt;/strong&gt; matureCheck(self, card):
    f = card.note()
    &lt;strong&gt;if&lt;/strong&gt; (card.ivl &amp;gt;= threshold):
        f.addTag(MatureTag)
    &lt;strong&gt;else&lt;/strong&gt;:
        f.delTag(MatureTag)
    f.flush()
    &lt;strong&gt;return&lt;/strong&gt; True&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最後に &lt;code&gt;addHook()&lt;/code&gt; 関数を使って上で作成したカスタムフック &#34;anseweredRevCard&#34;　で &lt;code&gt;matureCheck()&lt;/code&gt; 関数を呼び出す設定をします。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;addHook(&#34;anseweredRevCard&#34;, matureCheck)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで、完成です。完成品は次の通りです。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;strong&gt;from&lt;/strong&gt; anki.hooks &lt;strong&gt;import&lt;/strong&gt; addHook, runHook, wrap
&lt;strong&gt;from&lt;/strong&gt; anki.sched &lt;strong&gt;import&lt;/strong&gt; Scheduler

&lt;i&gt;# Threshold interval for tagging&lt;/i&gt;
threshold = 21
&lt;i&gt;# Tag string for mature note&lt;/i&gt;
MatureTag = u&#34;Mature&#34;

&lt;strong&gt;def&lt;/strong&gt; matureCheck(self, card):
    f = card.note()
    &lt;strong&gt;if&lt;/strong&gt; (card.ivl &amp;gt;= threshold):
        f.addTag(MatureTag)
    &lt;strong&gt;else&lt;/strong&gt;:
        f.delTag(MatureTag)
    f.flush()
    &lt;strong&gt;return&lt;/strong&gt; True

&lt;strong&gt;def&lt;/strong&gt; newAnswerCard(self, card, ease):
    runHook(&#39;anseweredRevCard&#39;, self, card)

Scheduler.answerCard = wrap(Scheduler.answerCard, newAnswerCard)

addHook(&#34;anseweredRevCard&#34;, matureCheck)&lt;/pre&gt;&lt;/div&gt;
&lt;/section&gt;
&lt;section id=&#34;もっとかんたんに書く&#34;&gt;
  &lt;div class=&#34;page-header&#34;&gt;
    &lt;h2&gt;もっとかんたんに書く&lt;/h2&gt;
  &lt;/div&gt;
&lt;p&gt;実は、フックを設置せずに記述を簡略化できます。メソッドを上書きする方法です。
&lt;code&gt;wrap()&lt;/code&gt; 関数で直接 &lt;code&gt;matureCheck&lt;/code&gt; を指定します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;- &lt;strong&gt;def&lt;/strong&gt; newAnswerCard(self, card, ease):
-    runHook(&#39;anseweredRevCard&#39;, self, card)

- Scheduler.answerCard = wrap(Scheduler.answerCard, newAnswerCard)
+ Scheduler.answerCard = wrap(Scheduler.answerCard, matureCheck)

- addHook(&#34;anseweredRevCard&#34;, matureCheck)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この場合は、フックを使わないので、他の関数も追加で呼び出すような追加拡張はできません。&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&#34;ファイルの配置&#34;&gt;
  &lt;div class=&#34;page-header&#34;&gt;
    &lt;h2&gt;ファイルの配置&lt;/h2&gt;
  &lt;/div&gt;
&lt;p&gt;完成したファイル Mature_Tag.py を動作させるには、&lt;code&gt;Documents/Anki/addons&lt;/code&gt; フォルダの中に保存します。Anki を再起動すると、この Python スクリプトファイルを読み込みます。&lt;/p&gt;
&lt;p&gt;アドオンが読み込まれるとメニューバーに [ツール]-[アドオン]-[Mature_Tag] という項目が追加されます。&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&#34;ankiweb_の共有アドオン一覧に登録する&#34;&gt;
  &lt;div class=&#34;page-header&#34;&gt;
    &lt;h2&gt;AnkiWeb の共有アドオン一覧に登録する&lt;/h2&gt;
  &lt;/div&gt;
&lt;p&gt;作成したアドオンを AnkiWeb に公開して、アドオン一覧に登録する方法を紹介します。
まず、&lt;a href=&#34;https://ankiweb.net/shared/addons/&#34; target=&#34;_new&#34;&gt;共有アドオン一覧&lt;/a&gt;を開き、AnkiWeb にサインインします。&lt;/p&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;http://rs.luminousspice.com/images/anki_addon_tutorial_1.png&#34; alt=&#34;アドオン一覧&#34; width=&#34;60%&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;title&#34;&gt;図 1. 共有アドオン一覧&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;登録フォームは画面右上の [Upload Add-on] ボタンをクリックすると表示します。&lt;/p&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;http://rs.luminousspice.com/images/anki_addon_tutorial_2.png&#34; alt=&#34;登録フォーム&#34; width=&#34;60%&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;title&#34;&gt;図 2. アドオン登録フォーム&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;このフォームでは次のように項目入力します。&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;Title:&lt;/strong&gt; アドオンの名前を入力します。アドオン一覧に表示する名前にになります。
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;File:&lt;/strong&gt; 登録したいアドオンの Python スクリプトを選択します。今回の例では &lt;code&gt;Mature_Tag.py&lt;/code&gt; です。
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;Description&lt;/strong&gt; アドオンユーザーのためにアドオンの機能や使い方の説明を入力します。
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;入力が済んだら [Upload] を押すと登録できます。特に AnkiWeb に障害がなければ即座に公開されます。
登録したアドオンのページに移動します。&lt;/p&gt;
&lt;p&gt;公開したアドオンのページの下にある [Update] ボタンを押すと登録内容の編集ができ、[Remove] ボタンを押すとアドオンを削除することができます。&lt;/p&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;http://rs.luminousspice.com/images/anki_addon_tutorial_3.png&#34; alt=&#34;アドオンページ 編集、削除ボタン&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;title&#34;&gt;図 3. アドオンページ 編集、削除ボタン&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id=&#34;まとめ&#34;&gt;
  &lt;div class=&#34;page-header&#34;&gt;
    &lt;h2&gt;まとめ&lt;/h2&gt;
  &lt;/div&gt;
&lt;p&gt;「Anki 2.0 アドオンの作成」で説明しているとおり、Anki が標準で用意しているフックを利用すると Anki の機能の修正や追加が簡単になります。フックが用意されていない箇所にも、この記事で紹介した方法で自分でカスタムのフックを自由に追加することができます。フックの使い方になれると Anki アドオン作成するを能力が向上し、Anki 自身の機能についても理解を深めることができます。&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&#34;review&#34;&gt;
  &lt;div class=&#34;page-header&#34;&gt;
    &lt;h2&gt;遺補: Anki アドオン開発のおさらい&lt;/h2&gt;
  &lt;/div&gt;
&lt;p&gt;Anki のアドオンは、Python スクリプトで記述し、&lt;code&gt;Documents/Anki/addons&lt;/code&gt; フォルダの中に保存します。
Anki に Python インタープリタが含まれているため、アドオンの開発に Python のインストールは必要ありません。&lt;/p&gt;
&lt;p&gt;Anki は起動時に &lt;code&gt;addons&lt;/code&gt; フォルダの中の &lt;code&gt;.py&lt;/code&gt; ファイルを読み込みます。
従って、新たにアドオンファイルを追加した場合、再起動して初めて機能するようになります。
なお、シフトキーを押したまま Anki を起動すると、アドオンファイルの読み込みは行いません。&lt;/p&gt;
&lt;p&gt;Anki には、WordPress のようにフック (Hook) という機能を提供していて、標準機能を拡張したり、変更したりするアドオン開発が容易にできます。Anki 自身もたくさんのフックを利用しています。&lt;/p&gt;
&lt;p&gt;アドオンをつくるために Anki が用意している関数は次の通りです。&lt;/p&gt;
&lt;table rules=&#34;rows&#34; frame=&#34;hsides&#34;cellspacing=&#34;0&#34; cellpadding=&#34;4&#34;&gt;
&lt;caption class=&#34;title&#34;&gt;表 1. アドオン開発用関数&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col class=&#34;span1&#34;&gt;
&lt;col class=&#34;span4&#34;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;関数名&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;runHook&lt;/td&gt;
&lt;td&gt;フックを実行する。値は返さない。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;runFilter&lt;/td&gt;
&lt;td&gt;フィルターを実行し値を返す。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;addHook&lt;/td&gt;
&lt;td&gt;フックを追加する。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;remHook&lt;/td&gt;
&lt;td&gt;フックを削除する。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;wrap&lt;/td&gt;
&lt;td&gt;既存の関数を上書きする。第3引数でオリジナルの関数の位置を指定。既定はオリジナルの後にカスタム関数を実行する。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;フックを見つけるには、Anki のソースコードを　&#34;runHook&#34;、&#34;runFilter&#34; で検索します。Anki 2.0.20 現在　36 のフックが存在します。&lt;/p&gt;
&lt;p&gt;フックの使い方を詳しく知るには、&lt;a href=&#34;http://rs.luminousspice.com/anki2addons/&#34;&gt;Anki 2.0 アドオンの作成&lt;/a&gt;、および &lt;a href=&#34;https://github.com/dae/anki/blob/master/anki/hooks.py&#34; target=&#34;_new&#34;&gt;anki/hooks.py&lt;/a&gt; をお読みください。&lt;/p&gt;
&lt;/section&gt;
</content>
    </item>
    
    <item>
      <title>Mac OS X に IPython Notebook をインストールする場合の注意点</title>
      <link>http://rs.luminousspice.com/ipython-notebook-installation-on-macosx/</link>
      <pubDate>Mon, 02 Dec 2013 00:00:49 +0900</pubDate>
      <guid>http://rs.luminousspice.com/ipython-notebook-installation-on-macosx/</guid>
      <description>IPython Notebook を Mac OS X にインストールする際に発生する、matplotlib のインストールの問題を解決する方法を紹介します。</description>
      <content>&lt;section id=&#34;preamble&#34;&gt;
&lt;p&gt;IPython Notebook を Mac OS X にインストールする際に発生する、matplotlib のインストールの問題を解決する方法を紹介します。&lt;/p&gt;
&lt;p&gt;この記事は、Mac OS X 10.7 上に virtualenv で構築した Python 2.7.5 の仮想環境に IPython 1.1.0 をインストールする場合の注意点を取り上げます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://ipython.org/notebook.html&#34; target=&#34;_new&#34;&gt;IPython Notebook&lt;/a&gt; は、Python の対話的な Web ベースの使いやすいシェルで、グラフや数式を表示することができます。特に Python の科学計算パッケージを利用する場合に重宝します。
IPython のオフィシャルサイトで紹介している Anaconda という Python の商用配布パッケージには、IPython と関連パッケージが全て含まれていて、簡単にインストール可能です。&lt;/p&gt;
&lt;p&gt;しかしながら、既に Python の独自環境を構築していて、追加で IPython Notebook のインストールには、複数の Python パッケージをインストールする必要があります。
Mac OS X 環境に IPython Notebook インストールする手順としては、 &lt;a href=&#34;http://slowquery.hatenablog.com/entry/2013/04/01/010927&#34; target=&#34;_new&#34;&gt;IPython notebookでブラウザ内にグラフを描画する&lt;/a&gt; などの記事が参考になります。&lt;/p&gt;
&lt;p&gt;ただし Mac OS X の場合、&lt;code&gt;pip install matplotlib&lt;/code&gt; だけでは、matplotlib がインストールできず、IPython 実行後のグラフの描画の際にエラーが発生する場合があります。&lt;/p&gt;
&lt;p&gt;これは、Stack Overflow の投稿 &lt;a href=&#34;http://superuser.com/questions/242190/how-to-install-matplotlib-on-os-x&#34; target=&#34;_new&#34;&gt;How to install matplotlib on OS X?&lt;/a&gt; によれば、Mac OS X の場合、matplotlib をインストールする前に、コンパイルオプションを指定すると解決できるそうです。&lt;/p&gt;
&lt;p&gt;pip を使う場合は、次のように実行します。&lt;/p&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nb&#34;&gt;export &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;LDFLAGS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;-L/usr/X11/lib&amp;quot;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;export &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;CFLAGS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;-I/usr/X11/include -I/usr/X11/include/freetype2 -I/usr/X11/include/libpng12&amp;quot;&lt;/span&gt;
pip install matplotlib
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;インストール終了後、再度グラフを描画して、確認すれば作業完了です。&lt;/p&gt;
&lt;/section&gt;
</content>
    </item>
    
    <item>
      <title>静的サイトジェネレータ Pelican で AsciiDoc を使う方法</title>
      <link>http://rs.luminousspice.com/pelican_with_asciidoc/</link>
      <pubDate>Sun, 01 Dec 2013 21:00:53 +0900</pubDate>
      <guid>http://rs.luminousspice.com/pelican_with_asciidoc/</guid>
      <description>静的サイトジェネレータ Plican で AsciiDoc を機能させるのに必要な、文書化されていない作業をまとめました。</description>
      <content>&lt;section id=&#34;preamble&#34;&gt;
&lt;p&gt;静的サイトジェネレータ Plican で AsciiDoc を機能させるのに必要な、文書化されていない作業をまとめました。AsciiDoc API  のインストール方法と、日本語を処理した時に発生するユニコードエラーの対応について説明しています。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://docs.getpelican.com/&#34;&gt;Pelican&lt;/a&gt; は、Python で書かれた静的なサイトジェネレータです。reStructuredText や Markdown を標準でサポートしています。&lt;/p&gt;
&lt;p&gt;マークアップ言語に &lt;a href=&#34;http://www.methods.co.nz/asciidoc/&#34;&gt;AsciiDoc&lt;/a&gt; を利用するために必要な、文書化されていない手続について説明します。&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&#34;asciidoc_api_のインストール&#34;&gt;
  &lt;div class=&#34;page-header&#34;&gt;
    &lt;h2&gt;AsciiDoc API のインストール&lt;/h2&gt;
  &lt;/div&gt;
&lt;p&gt;Pelican で AsciiDoc を利用するには、&lt;a href=&#34;http://www.methods.co.nz/asciidoc/asciidocapi.html&#34;&gt;AsciiDoc API&lt;/a&gt; をインストールする必要があります。
Markdown を利用するには pip を使ったインストールが可能ですが、AsciiDoc の場合は別途作業になります。&lt;/p&gt;
&lt;p&gt;AsciiDoc API は &lt;code&gt;asciidocapi.py&lt;/code&gt; ファイルの形で提供されています。Sourceforge から &lt;a href=&#34;http://sourceforge.net/projects/asciidoc/&#34;&gt;AsciiDoc のソースコード&lt;/a&gt;のアーカイブを解凍するとトップレベルに &lt;code&gt;asciidocapi.py&lt;/code&gt; が見つかります。&lt;/p&gt;
&lt;p&gt;私の環境は、virtualenv を使っていますので次の場所にインストールしました。
&lt;code&gt;~/.virtualenvs/(Pelicanを使う仮想環境名)/bin/asciidocapi.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;これで、ドキュメントのファイル名の拡張子を &lt;code&gt;asc&lt;/code&gt; にすると、Pelican は AsciiDoc として認識し処理してくれます。&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&#34;ユニコードエラーの問題&#34;&gt;
  &lt;div class=&#34;page-header&#34;&gt;
    &lt;h2&gt;ユニコードエラーの問題&lt;/h2&gt;
  &lt;/div&gt;
&lt;p&gt;利用している Python 環境によっては、Pelican で日本語の文書を処理した時にユニコードのエラーが発生することがあります。これは既定のエンコーディングが utf-8 になっていないためです。&lt;/p&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;WARNING: Could not process ./mydoc.asc
&lt;span class=&#34;s1&#34;&gt;&amp;#39;ascii&amp;#39;&lt;/span&gt; codec can&amp;#39;t encode characters in position 20-22: ordinal not in range&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;128&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Done: Processed 1 articles and 0 pages in 0.40 seconds.
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;次のように、調べると既定のエンコーディングを調べることができます。&lt;/p&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; import sys
&amp;gt;&amp;gt;&amp;gt; sys.getdefaultencoding&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;&amp;#39;ascii&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;asciidocapi.py を書き換える方法と、Python の環境設定ファイルを編集する方法があります。Python の配布用モジュールを開発している訳ではないので、今回は環境設定ファイルで対応しました。&lt;/p&gt;
&lt;p&gt;設定は &lt;code&gt;sitecustomize.py&lt;/code&gt; を編集します。
このファイルのありか次のように調べます。&lt;/p&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; import sitecustomize
&amp;gt;&amp;gt;&amp;gt; sitecustomize.__file__
&lt;span class=&#34;s1&#34;&gt;&amp;#39;/usr/local/lib/python2.7/site-packages/sitecustomize.pyc&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;このファイルに次のような記述を追加します。&lt;/p&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;sys&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setdefaultencoding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;最後に、既定の設定が反映されているか確認します。次のように utf-8 になっていれば完了です。&lt;/p&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; import sys
&amp;gt;&amp;gt;&amp;gt; sys.getdefaultencoding&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;文書化されていない Pelican での AsciiDoc 利用の方法はここまでです。
ここから先は、他のマークアップ言語と同じようにドキュメントの内容に従って使いこなしてください。&lt;/p&gt;
&lt;/section&gt;
</content>
    </item>
    
    <item>
      <title>MSDN Magazine過去10年分の頻出語彙からAnki単語帳を作る</title>
      <link>http://rs.luminousspice.com/frequent-words-in-msdn-magazine-in-10years/</link>
      <pubDate>Fri, 07 Jun 2013 22:30:38 +0900</pubDate>
      <guid>http://rs.luminousspice.com/frequent-words-in-msdn-magazine-in-10years/</guid>
      <description>以前の記事では、過去3年分のMSDN Magazineの記事のコーパス分析から頻出語彙表を作成し、Anki単語帳に加工する方法を紹介しました。前回手をつけなかったCHMファイルをコーパスに取り込み過去10年に遡った分析し [&amp;hellip;]</description>
      <content>&lt;section id=&#34;msdn_magazine過去10年分の頻出語彙からanki単語帳を作る&#34;&gt;
&lt;p&gt;以前の記事では、過去3年分のMSDN Magazineの記事のコーパス分析から頻出語彙表を作成し、Anki単語帳に加工する方法を紹介しました。前回手をつけなかったCHMファイルをコーパスに取り込み過去10年に遡った分析します。前回作成したMSDN Word Listからの差分は102語になりました。&lt;/p&gt;
&lt;div class=&#34;sidebarblock well&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;p&gt;&lt;a href=&#34;http://ankisrs.net/&#34;&gt;Anki&lt;/a&gt;とはDamien Elmesが開発している分散学習システム(SRS; Spaced Repetition learning Systems)です。&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&#34;おことわり&#34; class=&#34;section&#34;&gt;おことわり&lt;/h2&gt;
&lt;div class=&#34;sidebarblock well&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;p&gt;この記事は、楽しむことを目的とした内容で、学術的な厳密性を考慮していません。&lt;/p&gt;
&lt;p&gt;MSDNは、Microsoft Corporationの商標であり、
MSDN Magazineは、1105 Media, Inc.の出版物です。&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&#34;使うもの&#34; class=&#34;section&#34;&gt;使うもの&lt;/h2&gt;
&lt;div class=&#34;ulist&#34;&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://ankisrs.net/&#34;&gt;Anki2&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://msdn.microsoft.com/en-us/magazine/default.aspx&#34;&gt;MSDN Magazine&lt;/a&gt; BackNumber 2003.01 - 2009.07
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
コンコーダンサーソフト (この記事の作成には、&lt;a href=&#34;https://sites.google.com/site/casualconcj/Home&#34;&gt;CasualConc&lt;/a&gt;を使いました。)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
表計算ソフト (この記事の作成には、&lt;a href=&#34;http://ja.libreoffice.org/&#34;&gt;LibreOffice Calc&lt;/a&gt;を使いました。)
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;h2 id=&#34;はじめに&#34; class=&#34;section&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;以前の記事、&lt;a href=&#34;http://rs.luminousspice.com/frequent-words-in-msdn/&#34;&gt;Windows開発者の必修語彙をAnki学習する方法&lt;/a&gt;ではMSDN MagazineのバックナンバーのうちPDF化されている過去3年分について、コーパス分析を行いました。
コンコーダンサーソフトに読み込む作業の煩雑さから、CHM(Microsoft Compiled HTML Help)形式のファイルは対象としませんでした。&lt;/p&gt;
&lt;p&gt;今回は、CHMファイルをPDFに変換してコンコーダンサーに読み込む方法に挑戦します。&lt;/p&gt;
&lt;p&gt;2003年のバックナンバーを改めて読んでみました。.NET Framework 1.1とWindows XP SP2(Springboard)という現在のWindowsプラットフォームの基盤となる製品がリリースした頃です。ここまで遡ってコーパスデータを分析すれば、ほぼWindowsプラットフォームの技術文書に特有な語彙は網羅できるだろうと考えました。&lt;/p&gt;
&lt;p&gt;内容の面での代表性を考えるとSpringboardまで遡らないと不十分なのではと、気になっていました。&lt;/p&gt;
&lt;p&gt;CHMファイル数は79で、今回の拡張で前回の分析データから3倍に増加します。&lt;/p&gt;
&lt;p&gt;分析前の予想として、高頻度の語彙の使用がさらに集中して、使用語彙の98%に入る頻出語彙の種類は減るだろうというと考えています。実際に確認してみました。&lt;/p&gt;
&lt;h2 id=&#34;chmファイルの変換&#34; class=&#34;section&#34;&gt;CHMファイルの変換&lt;/h2&gt;
&lt;p&gt;CHMファイルを分解して取り出す正統的な方法は&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ms669985.aspx&#34;&gt;Help Workshop&lt;/a&gt;を使う方法です。この方法だと手作業の部分が非常に多くなるため二の足を踏んでいました。&lt;/p&gt;
&lt;p&gt;なにかCHMファイルをコンバートする上手い方法はないだろうかと探していたところ、pdfに変換してくれるアプリケーションが見つかりました。&lt;a href=&#34;http://code.google.com/p/ichm/&#34;&gt;iChm&lt;/a&gt;というMac OS X上のCHMビューアーと&lt;a href=&#34;http://code.google.com/p/chm2pdf/&#34;&gt;chm2pdf&lt;/a&gt;という変換用Pythonスクリプトです。&lt;/p&gt;
&lt;p&gt;心情的にはchm2pdfを使って、シェルスクリプトで一括処理したかったのですが、MSDN Magazineの1冊分のファイル容量では大きすぎて、chm2pdfはエラーをはきます。そこで残念ながら79個のファイルを手作業でiChmを使って、pdfに書き出しました。&lt;/p&gt;
&lt;p&gt;なお、chm2pdfのMac OS X上でのビルド方法について情報がインターネット上にほとんどなかったので、この記事の最後に補足として記録しておきます。&lt;/p&gt;
&lt;h2 id=&#34;コンコーダンサーcasualconcへの読み込み&#34; class=&#34;section&#34;&gt;コンコーダンサーCasualConcへの読み込み&lt;/h2&gt;
&lt;p&gt;pdf化したバックナンバーをCasualConcで既存のコーパスデータベースに追加します。
前回はデータベースの新規作成を行いましたが、今回はデータの追加なので作業手順が若干異なります。&lt;/p&gt;
&lt;p&gt;今回のデータを別のデータベースとして新規作成する方法もあります。手順は前回と同じです。
この場合は、頻度表をカウントする時に複数のデータベースを指定する必要があります。&lt;/p&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;http://rs.luminousspice.com/images/msdnwl1.png&#34; alt=&#34;ファイルツール&#34; width=&#34;600&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;title&#34;&gt;図 1. CasualConc ファイルツール画面&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;title&#34;&gt;コーパス作成手順 (図1)&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
画面上[ファイル]タブをクリックしてファイルツールを表示する。
&lt;/li&gt;
&lt;li&gt;
右上画面下[追加]ボタンでコーパス化するファイルを選択する。
&lt;/li&gt;
&lt;li&gt;
左下画面下[追加リストから追加]ボタンを押すとコーパスが作成できます。
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ここで、登録済みのデータを重複して登録するかというダイアログが表示される場合があります。ディレクトリ内に以前作業したファイルが残っている場合などですが、[すべていいえ]を選択してください。&lt;/p&gt;
&lt;p&gt;その後の手順は、&lt;a href=&#34;http://rs.luminousspice.com/frequent-words-in-msdn/&#34;&gt;Windows開発者の必修語彙をAnki学習する方法&lt;/a&gt;の通りです。&lt;/p&gt;
&lt;h2 id=&#34;10年分に対象を拡大した結果&#34; class=&#34;section&#34;&gt;10年分に対象を拡大した結果&lt;/h2&gt;
&lt;p&gt;頻度順に語彙を並べて、コーパス全体に占める割合を足していくと2754番目に98%に達します。登場回数は77が最小値です。
そこから、一般的に高頻度な語彙(GSL+BNC2K)と学術的に高頻度な語彙を除き、MSDN Magazineに特有な頻出語彙662語を抽出しました。&lt;/p&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;http://rs.luminousspice.com/images/msdnwl10y1.png&#34; alt=&#34;MSDN Magazine コーパスの内訳&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;title&#34;&gt;図 2. MSDN Magazine 過去10年分の使用語彙の内訳&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;さて、最初の予想はどうなったかというと、直近3年分の分析結果から180語が外れて、100語が追加になりました。&lt;/p&gt;
&lt;p&gt;10年のスパンで見ると頻出語句だけど、この3年では頻出語句からものは、gadget、cursor、virus、KB、LOB、fuzzy、RPC、enumeratorなどが含まれていて、時代を感じさせる言葉です。
この3年で頻出語句に入ってきたものは、geographic、multicore、affiliate、gpu、ubiquitous、taxonomy、prototypeなどです。SEOなどのバズワードも入っています。&lt;/p&gt;
&lt;p&gt;技術の進歩や市場の関心の変化が反映していることが読み取れました。&lt;/p&gt;
&lt;p&gt;当初は、10年分の分析結果の語彙表を決定版として、3年分のデータを置き換えようと考えていました。
多くのコーパス分析の対象は、過去に向いて文学作品など固定した文書ですが、今自分が扱っているのは生ものの文字情報なのだということに気づきました。&lt;/p&gt;
&lt;p&gt;未来に向けて、予言する訳ではないですが、これから出てくるであろう文書を読むための語彙を調べようという趣旨なので、直近3年分のデータを正本として、10年分のデータは補足資料として扱おうと方針転換しました。
ほとんど無駄な努力だったかもです。この脱力感がたまらない。同時に直近3年分のデータからの結果に自信を持ちました。&lt;/p&gt;
&lt;p&gt;直近3年の頻出語句からもれた102語を補足データとして、&lt;a href=&#34;http://ankisrs.net/&#34;&gt;Anki&lt;/a&gt;単語帳のパッケージデータにしました。Level3というタグを付加しています。&lt;/p&gt;
&lt;h2 id=&#34;完成品のダウンロード&#34; class=&#34;section&#34;&gt;完成品のダウンロード&lt;/h2&gt;
&lt;p&gt;この記事で作成した差分の単語帳は、&lt;a href=&#34;http://rs.luminousspice.com/apkg/msdnwl_adx.apkg&#34;&gt;Anki単語帳パッケージ msdnwl_adx.apkg (15.2KB)&lt;/a&gt;をダウンロードしてお使いいただけます。
子単語帳`MSDNWords::Level3`として作成していますので、既にダウンロード済みの単語帳に追加して使うことができます。&lt;/p&gt;
&lt;p&gt;全体の単語帳は、&lt;a href=&#34;http://rs.luminousspice.com/apkg/msdnwl.apkg&#34;&gt;Anki単語帳パッケージ msdnwl.apkg (80.6KB)&lt;/a&gt;をダウンロードしてお使いいただけます。&lt;/p&gt;
&lt;p&gt;この単語帳を使うにはAnkiのインストールが必要です。&lt;a href=&#34;http://ankisrs.net/&#34;&gt;Ankiサイト&lt;/a&gt;から最新版をダウンロードできます。Ankiは、Windows、Mac、Linux/BSD、iOS、Androidに対応しています。その他のデバイスからはAnkiWebを通じて利用可能です。詳しくはAnkiサイトをご覧ください。&lt;/p&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;http://rs.luminousspice.com/images/msdnwl10y2.png&#34; alt=&#34;完成品画面&#34; width=&#34;400&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;title&#34;&gt;図 3. 完成品画面&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;このAnki単語帳の使い方については、&lt;a href=&#34;http://rs.luminousspice.com/frequent-words-in-msdn/&#34;&gt;Windows開発者の必修語彙をAnki学習する方法&lt;/a&gt;をご覧ください。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34; class=&#34;section&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;テキストデータをより広範に収集できれば、頻度表の品質を向上させることができます。
その際には目的にかなった対象を選ぶことが大切です。&lt;/p&gt;
&lt;p&gt;当初の目論みから方針転換はしましたが、取得したデータの内容から、この分野の頻出語彙集の決定版だと思っています。&lt;/p&gt;
&lt;p&gt;個人としてできることは、あとはSDKのドキュメントなどからコーパスデータを作って個別製品の開発に特化したより分野の狭い専門語彙を見つけ出すことだと思います。
全てのSDKドキュメントを集めて、合算して分析する発想もありますが、今回の結果と大きな差でないのではないかと思います。
但し、全SDKドキュメントのコーパスの作成は、今回の様な頻出語彙を取り出すのではなくて、もっと広範で高度なコーパス分析には意義があると思います。&lt;/p&gt;
&lt;p&gt;頻度表を得るために作ったコーパスをKWIC分析やN-gram分析を掛けると、その語彙の語義だけでは分からない、MSDNのコンテキストの中での、その語彙の振る舞いが一覧にして理解できるようになります。この情報は語彙学習の面で極めて強力でだと思います。サンプルのソースコードも一緒に見ることができます。&lt;/p&gt;
&lt;p&gt;もし、自分でコーパスを作ってみた方は、ぜひ頻度表を作った後も、コーパスをメンテナンスして語彙学習に活用してみてください。楽しくなってくると思います。いつか機会があれば、そんな内容の記事が書けたら良いなと持っています。&lt;/p&gt;
&lt;p&gt;CasualConcは、PDF以外にも、HTML、XML、Web Archive、RTF、Microsoft Word、OASIS OpenDocument Textなどの直接的な読み込みをサポートしています。
テキストファイルへの変換が面倒な場合でも、上記のいずれかのフォーマットに持ち込めれば、コーパスを簡単に作成できます。&lt;/p&gt;
&lt;p&gt;また、複数のコーパスデータベースを管理して、データベース間にまたがって分析することも簡単にできます。&lt;/p&gt;
&lt;p&gt;自分の目的にあったデータを見つけ出して、もっと自由にAnkiを楽しんでください。&lt;/p&gt;
&lt;h2 id=&#34;補遺_chm2pdfのmac_os_xへのインストール方法&#34; class=&#34;section&#34;&gt;補遺 chm2pdfのMac OS Xへのインストール方法&lt;/h2&gt;
&lt;p&gt;Pythonスクリプト&lt;a href=&#34;http://code.google.com/p/chm2pdf/&#34;&gt;chm2pdf&lt;/a&gt;の前提条件は次の3点です。&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/jedwing/CHMLib&#34;&gt;chmlib&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://gnochm.sourceforge.net/pychm.html&#34;&gt;pychm&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
htmldoc
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;htmldocは、&lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;から入手できるので、chmlib、pychmのみ自力でインストールしました。
Pythonはシステムに付属しているものではなく、&lt;a href=&#34;https://github.com/utahta/pythonbrew&#34;&gt;pythonbrew&lt;/a&gt;からインストールしたPython 2.7.3を使いました。&lt;/p&gt;
&lt;h3 id=&#34;chmlib&#34;&gt;chmlib&lt;/h3&gt;
&lt;p&gt;Mac OS Xでのインストール方法が &lt;code&gt;INSTALL&lt;/code&gt; ファイルに書かれています。
更に、chm2pdfの &lt;code&gt;README&lt;/code&gt; に書かれている通り、 Makefileを作る時に `./configure --enable-examples`オプションが必要です。MacPortから入手できるものはこのオプションがないそうです。&lt;/p&gt;
&lt;h3 id=&#34;pychm&#34;&gt;pychm&lt;/h3&gt;
&lt;p&gt;pychmは、`README`に書かれている方法でインストールし、シェルの環境変数を設定します。&lt;/p&gt;
&lt;p&gt;最後にchm2pdfの &lt;code&gt;README&lt;/code&gt; に書いてある方法でインストールします。
ターミナルから次のように入力して使います。
&lt;code&gt;chm2pdf (--book / --webpage/) [options] input_filename [output_filename]&lt;/code&gt;&lt;/p&gt;
&lt;/section&gt;
</content>
    </item>
    
  </channel>
</rss>
