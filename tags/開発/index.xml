<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>開発 on the Right Stuff</title>
    <link>http://rs.luminousspice.com/tags/%E9%96%8B%E7%99%BA/</link>
    <description>開発 | the Right Stuff</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Fri, 01 Apr 2016 21:27:23 +0900</lastBuildDate>
    <atom:link href="https://pubsubhubbub.superfeedr.com" rel="hub"/>
    <atom:link href="https://pubsubhubbub.appspot.com/" rel="hub"/>
    <atom:link href="http://rs.luminousspice.com/tags/%E9%96%8B%E7%99%BA/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Hugo に全文検索を取り付けた</title>
      <link>http://rs.luminousspice.com/hugo-site-search/</link>
      <pubDate>Fri, 01 Apr 2016 21:27:23 +0900</pubDate>
      <guid>http://rs.luminousspice.com/hugo-site-search/</guid>
      <description>静的サイトジェネレータ Hugo を使って生成したコンテンツに 全文検索を取り付けました。Hugo からコンテンツと一緒にインデックスファイルも同時に書き出し、クライアント側の JavaScript で日本語のキーワードを検索をします。</description>
      <content>&lt;div id=&#34;preamble&#34;&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;静的サイトジェネレータ Hugo を使って生成したコンテンツに 全文検索を取り付けました。Hugo でのコンテンツと一緒にインデックスファイルも同時に書き出し、クライアント側の JavaScript で日本語のキーワードを検索をします。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;toc::[]&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;この件は、ゼロベースから考えました。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;ちょうど WordPress で運用していたデータを静的ジェネレータ (SSG) の &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; に移行し、CI を使って GitHub Pages 上に展開したところです。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;最低限の CSS だけのテンプレートを使って静的なページを作っているので、JavaScript を使うにしても出来る限り絞り込みたいというのが、前提条件でした。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;元原稿は AsciiDoc の集まりなので、そこからインデックスファイルを作り、このファイルを JavaScript で検索するページを作ればよいだろうとザックリと考えました。サイトのコンテンツの規模は、1.2MB、70 ファイルです。&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_javascript_で全文検索&#34;&gt;JavaScript で全文検索&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;JavaScript の日本語の全文検索について調べていたところ、 &lt;a href=&#34;http://la.ma.la/search.html&#34;&gt;JavaScriptにBlogの全文検索をやらせてみるテスト&lt;/a&gt; を見つけました。事前にインデックスファイルを JavaScript のオプジェクトとして保存し、クライアント側で検索する作りになっています。
高速に検索し、使い勝手が気に入りました。これを自分の Hugo のコンテンツと一緒に使えないかと考えました。なお、再利用と改変について作者ご本人から直接承諾を得ました。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;このサイトでも、派生系のスクリプトでも、インデックスを生成するためのスクリプトを別途走らせています。この部分もSSG にやらせたいと考えました。ページを生成するのも、インデックスファイルを生成するのも大差ないのですから。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;&lt;strong&gt;参考:&lt;/strong&gt; &lt;a href=&#34;http://la.ma.la/blog/diary_200506252348.htm&#34;&gt;最速インターフェース研究会 JavaScriptにBlogの全文検索をやらせてみる&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_インデックスファイルの生成&#34;&gt;インデックスファイルの生成&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;Hugo に全文検索用のインデックスファイルを書き出させるには、ちょっとしたコツが必要です。Hugo のコミュニティサイトから学びました。それは、インデックスファイル &lt;tt&gt;index.js&lt;/tt&gt; を書き出すための特別な Type のテンプレートを作成し、ダミーの投稿と使って書き出すというものです。素晴らしいアイデアです。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;&lt;strong&gt;参考:&lt;/strong&gt; &lt;a href=&#34;https://discuss.gohugo.io/t/live-hugo-site-search-with-lunr-js/2857&#34;&gt;Live Hugo Site search with Lunr.js - tips &amp;amp; tricks - Hugo Discussion&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;これは lunr.js についての投稿ですが、これによって当初の企画が実現できました。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;これから実際にインデックスファイルを Hugo を使って書き出す手順を説明します。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_インデックスファイルのテンプレート&#34;&gt;インデックスファイルのテンプレート&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;このインデックスを書き出す Type を &#34;js&#34; と決め、書き出し用テンプレートを &lt;tt&gt;layouts/js/single.html&lt;/tt&gt; に配置しました。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;title&#34;&gt;single.html&lt;/div&gt;
&lt;div class=&#34;content&#34;&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;Section が Post の投稿に限定して、題名、URL、本文を取り出しています。なお、本文の書き出しには HTML を外すために変数 &lt;tt&gt;.PlainWords&lt;/tt&gt; を使いました。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;&lt;tt&gt;.PlainWords&lt;/tt&gt; の様な Hugo の文書化していないテキストに関する機能と JSON 形式でインデックスファイルを作成する場合のヒントについて &lt;a href=&#34;http://rs.luminousspice.com/hugo-site-search/#appendix&#34;&gt;遺補&lt;/a&gt; にまとめました。&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_インデックスファイルを生成する空の投稿&#34;&gt;インデックスファイルを生成する空の投稿&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;テンプレートで設定した内容を実際に生成するための空の投稿ファイル作ります。Front Matter で　Type を　&#34;js&#34; とし、url を &lt;tt&gt;index.js&lt;/tt&gt; と指定しました。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;title&#34;&gt;indexjs.adoc&lt;/div&gt;
&lt;div class=&#34;content&#34;&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;このサイトでは AsciiDoc で書いているので拡張子を &lt;tt&gt;adoc&lt;/tt&gt; にしましたが &lt;tt&gt;md&lt;/tt&gt; にしても機能します。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;その結果が &lt;a href=&#34;http://rs.luminousspice.com/index.js&#34;&gt;http://rs.luminousspice.com/index.js&lt;/a&gt; になります。容量は 700 KB です。
インデックスファイルが実利用に耐えうるサイズになるか、当初心配しました。
過去 4 年でこのサイズですから、このサイトではこれから　4−5 年は問題なく使えると判断しました。&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_検索ページの作成&#34;&gt;検索ページの作成&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;次に、作成したインデックスファイル &lt;tt&gt;index.js&lt;/tt&gt; を検索するユーザーインタフェイスを作ります。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_検索ページテンプレートの作成&#34;&gt;検索ページテンプレートの作成&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;検索ページ用の Type &#34;search&#34; のテンプレート &lt;tt&gt;layouts/search/single.html&lt;/tt&gt; を作り、その中にオリジナルの最速インターフェース研究会のスクリプトを取り込みました。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;収録コンテンツの検索内容との兼ね合いで、オリジナルで使用している JavaScriptによるローマ字仮名変換ライブラリ &lt;tt&gt;roma.js&lt;/tt&gt; は使いませんでした。&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_検索ページの作成_2&#34;&gt;検索ページの作成&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;検索ページを配置するための投稿を作成します。Front Matter は次のように設定しました。Type を &#34;Search&#34; に指定しています。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;title&#34;&gt;search.adoc (検索ページの Front Matter)&lt;/div&gt;
&lt;div class=&#34;content&#34;&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;&lt;strong&gt;参考:&lt;/strong&gt; &lt;a href=&#34;https://discuss.gohugo.io/t/another-way-to-search/1736&#34;&gt;Another way to search - tips &amp;amp; tricks - Hugo Discussion&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_完成品はこれだ&#34;&gt;完成品はこれだ&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;&lt;a href=&#34;http://rs.luminousspice.com/search/&#34;&gt;全文検索&lt;/a&gt; が完成品です。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;矢印キーとリターンキーでページ送りすることができます。
極めて高速に検索でき、自分が抱いていた検索のユーザー体験を破壊してくれました。
複数キーワードを使った複雑な検索などは検索エンジンを使ってもらうことにしましょう。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;あまりに便利なので、サイト移行の使ったデータ変換作業の検証に実際に使いました。
検索機能を取り付けるまでに必要な作業はここまでです。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_このサイトでの変更点&#34;&gt;このサイトでの変更点&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;オリジナルからの変更点は次の通りです。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
検索結果のページ送りに矢印キーの上下を機能するようにした。
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
レイアウトデザインをテーマに合わせて調整した。
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
サイトの公開形態上、公開日表示を外した。
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
コンテンツの内容から、ローマ字かな変換機能を外した。
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_検索結果の調整&#34;&gt;検索結果の調整&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;初期設定ではインデックスは公開日順に書き出します。つまり検索結果に複数候補がある時は、日付順に表示します。
このサイトのコンテンツは日記やブログではなく、全てのコンテンツを継続的に更新しているので経時的な順序に意味はありません。
そこで、統計情報のアクセス数や検索キーワード元に重み付けしました。アクセス数の九割を占めている収録コンテンツの半数に &lt;tt&gt;.Weight&lt;/tt&gt; を使って三段階に重み付けしました。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;検索結果は重み付け＞日付の順に表示するように変えました。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;&lt;strong&gt;参考:&lt;/strong&gt; Hugo ドキュメント &lt;a href=&#34;https://gohugo.io/templates/list/#ordering-content&#34;&gt;Ordering Content&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_検索対象の絞り込み&#34;&gt;検索対象の絞り込み&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;現在は、全文検索の対象は本文のみになっています。当初は検索対象に、タグや概要も含めていました。実際に完成して使ってみると、全文検索というのは検索キーワードが実際のコンテンツの文脈と一緒に表示されることに意味がある (つまり KWIC なんですが) ことを再確認しました。
そこで、タグや概要については全文検索以外の手段で利用できることから除外しました。&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_hugo_の検索機能の動向についてのまとめ&#34;&gt;Hugo の検索機能の動向についてのまとめ&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;Hugo の検索機能について、一般的に使われている方法について簡単にまとめておきましょう。
今回の事例では極力 JavaScript の追加は制限する方針でしたが、特に制約の状況では、もっと簡単に設置できる方法が見つかります。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_広く使われている方法&#34;&gt;広く使われている方法&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;SSG で広く使われている全文検索機能は &lt;a href=&#34;https://github.com/olivernn/lunr.js&#34;&gt;lunr.js&lt;/a&gt; が有名です。専用のプラグインがある SSG もありますが、Hugo の場合は外部のプログラムによって JSON 形式インデックスファイル生成し、検索するのが一般的なようです。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;日本語化は、 &lt;a href=&#34;https://github.com/MihaiValentin/lunr-languages&#34;&gt;lunr-languages&lt;/a&gt;を使えばできるらしく、 &lt;a href=&#34;http://chasen.org/~taku/software/TinySegmenter/&#34;&gt;TinySegmenter&lt;/a&gt;
 が同梱されていました。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/hugo-lunr&#34;&gt;hugo-lunr&lt;/a&gt; を使うと Hugo 用のインデックスファイルを生成してくれます。&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_hugo_での_lunr_js_利用事例&#34;&gt;Hugo での lunr.js 利用事例&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;lunr.js の事例は Hugo のサポートサイトで見つかります。検索ページの配置の仕方や、インデックスファイルを作り方は、自分の事例でも参考になりました。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://discuss.gohugo.io/t/live-hugo-site-search-with-lunr-js/2857&#34;&gt;Live Hugo Site search with Lunr.js - tips &amp;amp; tricks - Hugo Discussion&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://discuss.gohugo.io/t/another-way-to-search/1736&#34;&gt;Another way to search - tips &amp;amp; tricks - Hugo Discussion&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://gist.github.com/sebz/efddfc8fdcb6b480f567&#34;&gt;hugo + gruntjs + lunrjs = &amp;lt;3 search&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_今後有望な_docsearch_というサービス&#34;&gt;今後有望な DocSearch というサービス&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;この全文検索の作業が一段落して Hugo のリポジトリをアップデートしたところ、Hugo のドキュメントの検索が　Algolia の &lt;a href=&#34;http://community.algolia.com/docsearch/&#34;&gt;DocSearch&lt;/a&gt; というサービスを変更になっていることに気がつきました。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;自分のサイトの URL を登録すると、クローラーがインデックスを作り、スニペッドで UI を提供してくれるようで、日本語もサポート済みとのこと。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;具体的な配置方法は、 &lt;a href=&#34;https://github.com/spf13/hugo/commit/8890885a705699e7541cfd42f150b37c0a7a72a0&#34;&gt;8890885&lt;/a&gt; を見ると分かると思います。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;既に &lt;a href=&#34;https://github.com/algolia/algoliasearch-wordpress&#34;&gt;WordPress&lt;/a&gt; や &lt;a href=&#34;https://blog.algolia.com/instant-search-blog-documentation-jekyll-plugin/&#34;&gt;Jekyll&lt;/a&gt; のプラグインを提供しているようです。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;これまで、自分でやって来た作業を全て肩代わりしてくれるサービスだ。なんてありがたいと思って試しに登録してみたら、このサイトは &#34;documentation site&#34; ではなく、クローラーも完全には正しく処理できないとお断りされました。
代わりに、10,000 Records、100,000 Operations まで無料で使える Hacker プランを勧められました。&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;appendix&#34;&gt;遺補&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;この作業を行っているうちに見つけた関連項目をまとめます。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;hugofunction&#34;&gt;Hugo の文書化されていないテキスト機能&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;Hugo には、未だ文書化されていないテキストに関する変数や組み込み関数があります。参考までに紹介します。
それぞれの使い方や機能については、GitHub などでコミット内容を確認ください。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;&lt;div class=&#34;title&#34;&gt;変数&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
.Plain &lt;a href=&#34;https://github.com/spf13/hugo/commit/be5ace1588e54c2b0081d7c8ad57795b67307cde&#34;&gt;be5ace1&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
.PlainWords &lt;a href=&#34;https://github.com/spf13/hugo/commit/f8704c1bf23d22530ff417e0f48ee487a167a0f7&#34;&gt;f8704c1&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;&lt;div class=&#34;title&#34;&gt;関数 (0.16-DEV から)&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
plainify &lt;a href=&#34;https://github.com/spf13/hugo/commit/e5e1bcc271246fa96ea8ffdb6a8bbc879cf296ce&#34;&gt;e5e1bcc&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
jsonify &lt;a href=&#34;https://github.com/spf13/hugo/commit/435e996c4fd48e9009ffa9f83a19fb55f0777dbd&#34;&gt;435e996&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;indexjson&#34;&gt;JSON 形式でインデックスファイルを作成するには&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;この記事のアプローチと同じ方法で JSON 形式でインデックファイルを作ることも可能です。実際に XMLHttpRequest で読んで同じように検索できることころまで確認しました。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;この場合のポイントは、インデックスファイルを書き出す際に、検索対象の文字列を JSON 形式を満足するようにエスケープすることです。Hugo の新しい組み込み関数 &lt;tt&gt;jsonify&lt;/tt&gt; も用意されているのですが、私の事例では全てのコンテンツに対して満足いく結果を出せませんでした。&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Hugo からインデックスファイルを書き出すには独自の Type を作る。
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
インデックスファイルのサイズがシステム採用の判断に影響を与える。
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
インデックスファイル内の項目順序が検索結果の表示に影響するので調整が必要。
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Hugo の文書化されていない機能はユーザーコミュニティの類似の事例から見つけやすい。
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Hugo の機能拡張をするなら、最新動向を一度調べた方がよい。
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
    </item>
    
    <item>
      <title>Anki カードへの HTML5 メディアの埋め込み</title>
      <link>http://rs.luminousspice.com/html5-on-anki/</link>
      <pubDate>Thu, 31 Dec 2015 23:00:39 +0900</pubDate>
      <guid>http://rs.luminousspice.com/html5-on-anki/</guid>
      <description>HTML5 Video の機能を使って、Anki に埋め込んだ動画のインターフェイスを変更する方法について説明します。さらに Mac と iPhone でデータを同期する場合の注意点についても扱います。</description>
      <content>&lt;section id=&#34;preamble&#34;&gt;
&lt;p&gt;HTML5 Video の機能を使って、Anki に埋め込んだ動画のインターフェイスを変更する方法について説明します。さらに Mac と iPhone でデータを同期する場合の注意点についても扱います。&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&#34;はじめに&#34;&gt;
  &lt;div class=&#34;page-header&#34;&gt;
    &lt;h2&gt;はじめに&lt;/h2&gt;
  &lt;/div&gt;
&lt;p&gt;Anki に動画を埋め込むと別ウィンドウで再生します。この動作が些細なことですが違和感を覚えていました。Anki の動画再生に使っている &lt;a href=&#34;http://rs.luminousspice.com/mplayer-shortcut-for-anki-video/&#34;&gt;MPlayer のショートカット&lt;/a&gt;を使えばかなり動作を細かく制御できることは分かったのですが、別ウィンドウが開くことへわだかまりは消えませんでした。そこでこの問題を解決するするために辿り着いた、HTML5 Video 要素を使ってカードに埋め込んだ動画を再生する方法を紹介します。なお、HTML5 によるメディアの埋め込みは Anki のサポート対象外です。&lt;/p&gt;
&lt;p&gt;こちらもサポート対象外ながら Iframe を使うという方法もあります。この方法を以前利用していたのですが、Google API のサポートの変更にともなって今年の 4 月頃から YouTube の動画を Anki 上に埋め込み表示できなくなりました。さて、何か代わりの方法はないだろうかというのが、HTML5 の利用を考え始めた切っ掛けです。&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&#34;注意事項&#34;&gt;
  &lt;div class=&#34;page-header&#34;&gt;
    &lt;h2&gt;注意事項&lt;/h2&gt;
  &lt;/div&gt;
&lt;p&gt;この記事は、Anki のサポート対象外の機能について説明しています。&lt;/p&gt;
&lt;p&gt;たとえば、Anki サポートフォーラムの記事 &lt;a target=&#34;_new&#34; href=&#34;https://anki.tenderapp.com/discussions/ankidesktop/12516-can-i-embed-youtube-videos&#34;&gt;Can I embed Youtube videos?&lt;/a&gt; 、&lt;a target=&#34;_new&#34; href=&#34;https://anki.tenderapp.com/discussions/ankidesktop/4745-embedding-external-websites-with-iframe-or-object-html-tags&#34;&gt;Embedding external websites with iframe or object html tags&lt;/a&gt;によれば、Anki は HTML5 や Flash の埋め込みコンテンツやIFrame によるリモート表示をサポートしていません。&lt;/p&gt;
&lt;p&gt;このことを理解した上で、動作している自分の環境 (OS X および iOS)の経験に基づいてこの投稿を作成しています。お使いになっている環境によっては、この記事の方法では動作しないかもしれません。
この記事を理解するには、HTML5 メディア埋め込みに関するの知識が必要です。&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&#34;html5_の記述&#34;&gt;
  &lt;div class=&#34;page-header&#34;&gt;
    &lt;h2&gt;HTML5 の記述&lt;/h2&gt;
  &lt;/div&gt;
&lt;p&gt;一番シンプルな書き方は、Anki のメディアフォルダに &lt;code&gt;myvideo.mp4&lt;/code&gt; という動画を表示するなら、次のような HTML の記述をノートに書き込みます。&lt;code&gt;controls&lt;/code&gt; 属性を付けているのは、再生位置や音量などの再生コントロールを表示するためです。&lt;code&gt;src&lt;/code&gt; 属性は、http サーバー上にあるコンテンツを指定しても動作します。&lt;/p&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;title&#34;&gt;動画の埋め込み&lt;/div&gt;
&lt;div class=&#34;content&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;video&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;myvideo.mp4&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;controls&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&amp;lt;/video&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/section&gt;
&lt;section id=&#34;コードの入力&#34;&gt;
  &lt;div class=&#34;page-header&#34;&gt;
    &lt;h2&gt;コードの入力&lt;/h2&gt;
  &lt;/div&gt;
&lt;p&gt;HTML を入力する際の注意点は、HTML エディタを開いて入力することです。ノートエディタで入力したいフィールドにフォーカスをあわせたら、Command + Shift + X を押すと HTML エディタが開きます。&lt;/p&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;http://rs.luminousspice.com/images/html5-anki-htmleditor.png&#34; alt=&#34;HTML エディタで HTML5 Video 要素を入力する&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;title&#34;&gt;図 1. HTML エディタで HTML5 Video 要素を入力する&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;完成品は次の通りです。動画下部に再生コントロールが現れます。左から、再生ボタン、再生時間、再生位置表示、全画面表示、音量が調節できます。&lt;/p&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;http://rs.luminousspice.com/images/html5-anki-card.png&#34; alt=&#34;HTML5 Video で動画をカードに埋め込む&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;title&#34;&gt;図 2. HTML5 Video で動画をカードに埋め込む&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id=&#34;音声の埋め込み&#34;&gt;
  &lt;div class=&#34;page-header&#34;&gt;
    &lt;h2&gt;音声の埋め込み&lt;/h2&gt;
  &lt;/div&gt;
&lt;p&gt;なお、HTML5 Audio 機能を使って音声も埋め込むことができます。
この場合は次のように HTML を記述します。この場合は、動画と同様のコントロールだけを表示します。&lt;/p&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;title&#34;&gt;音声の埋め込み&lt;/div&gt;
&lt;div class=&#34;content&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;audio&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;myvideo.mp4&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;controls&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&amp;lt;/audio&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/section&gt;
&lt;section id=&#34;iphone_との連携&#34;&gt;
  &lt;div class=&#34;page-header&#34;&gt;
    &lt;h2&gt;iPhone との連携&lt;/h2&gt;
  &lt;/div&gt;
&lt;p&gt;なお、HTML5 Video および Audio ともに iPhone (iOS) 上で動作します。同じデータを Mac、iPhone 間で同期して使うことができます。双方の環境で利用可能なフォーマットは、動画は mp4、音声は mp3 でした。&lt;/p&gt;
&lt;p&gt;また、iPhone から HTML5 のコードを直接入力しても動作します。&lt;/p&gt;
&lt;p&gt;動画の場合は、動画の真ん中のボタンをタップすると &lt;code&gt;[sound:]&lt;/code&gt; タグで埋め込んだときと同様のコントロールが立ち上がって、動画を再生します。&lt;/p&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;http://rs.luminousspice.com/images/html5-anki-iphone-video.png&#34; alt=&#34;HTML5 Video を iPhone 上で表示&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;title&#34;&gt;図 3. HTML5 Video を iPhone 上で表示&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;音声の場合は、再生コントロールを表示します。&lt;/p&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;http://rs.luminousspice.com/images/html5-anki-iphone-audio.png&#34; alt=&#34;HTML5 Audio を iPhone 上で表示&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;title&#34;&gt;図 4. HTML5 Audio を iPhone 上で表示&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id=&#34;同期の注意点&#34;&gt;
  &lt;div class=&#34;page-header&#34;&gt;
    &lt;h2&gt;同期の注意点&lt;/h2&gt;
  &lt;/div&gt;
&lt;p&gt;この記事では触れませんでしたが、フィールドではなくテンプレートに HTML5 のコードを直接書き込んでいる場合、iTunes および AnkiWeb 経由ともにメディアファイルの同期が行われません。この場合は、別途メディアファイルを持ち込む操作が必要になります。&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&#34;おわりに&#34;&gt;
  &lt;div class=&#34;page-header&#34;&gt;
    &lt;h2&gt;おわりに&lt;/h2&gt;
  &lt;/div&gt;
&lt;p&gt;HTML5 の力を借りれば、ちょっと HTML のコードを書くだけで、Anki のカードの使い勝手を変更できることが分かりました。&lt;/p&gt;
&lt;p&gt;Anki を使った学習は、毎日継続する作業なので、ちょっとしたユーザーインターフェイスの使い勝手であっても、モチベーションに大きな影響を与えます。たとえ、正式にサポートされていない機能であっても、自分が使っている機器で動作が確認できれば、そのインターフェイスを帰ることもできる柔軟性を Anki は持っています。
自分の知識を活用して、毎日少しずつ Anki の学習環境を改善していくことも、Anki を使う楽しみではないかと思います。&lt;/p&gt;
&lt;/section&gt;
</content>
    </item>
    
    <item>
      <title>フックを使った Anki アドオンのつくり方</title>
      <link>http://rs.luminousspice.com/how_to_create_anki_add-ons/</link>
      <pubDate>Fri, 17 Jan 2014 22:55:53 +0900</pubDate>
      <guid>http://rs.luminousspice.com/how_to_create_anki_add-ons/</guid>
      <description>Anki は、アドオンを作成することで、標準機能を拡張したり、変更したりすることが出来ます。このアドオンの作成を簡単にするために、Anki はフック (Hook) という機能を提供しています。Anki の本体機能にカスタムのフックを追加し、機能拡張するアドオンを作成する方法を簡単に説明します。復習後、熟知になったノートにタグを付けるアドオンを開発します。Simple tutorial to create Anki Add-ons for developer with an custom hook.</description>
      <content>&lt;section id=&#34;preamble&#34;&gt;
&lt;p&gt;Anki は、アドオンを作成することで、標準機能を拡張したり、変更したりすることができます。このアドオンの作成を簡単にするために、Anki はフック (Hook) という機能を提供しています。フックを使うと標準機能の中に簡単に外部の関数を組み込むことができます。この記事では更に進んで Anki の標準のフックがない場所にカスタムのフックを追加し、機能拡張するアドオンを作成する方法を簡単に説明します。復習後、熟知になったノートにタグを付けるアドオンを開発します。オフィシャルドキュメント「Anki 2.0 アドオンの作成」を補足する内容です。&lt;/p&gt;
&lt;p&gt;この記事は、АnkiWeb に公開済みの Аnki アドオン (Add-on) &lt;a href=&#34;https://ankiweb.net/shared/info/1299246957&#34; target=&#34;_new&#34;&gt;Mature Tag&lt;/a&gt;を例にとって、解説します。
完成品をインストールして動作させることができますし、ソースコードを見ることもできます。最後に作成したアドオンを AnkiWeb の共有アドオン一覧に登録する方法を紹介します。&lt;/p&gt;
&lt;p&gt;アドオンのインストール方法は、&lt;a href=&#34;http://rs.luminousspice.com/how-to-use-shared-resources/&#34;&gt;Ankiの共有リソースを使ってみる&lt;/a&gt;で紹介しています。&lt;/p&gt;
&lt;p&gt;また、ソースコードの表示方法は、インストールが完了した後、メニューバーの[ツール]-[アドオン]-[Mature_Tag]-[編集&amp;#8230;]を選択してください。&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&#34;前提知識&#34;&gt;
  &lt;div class=&#34;page-header&#34;&gt;
    &lt;h2&gt;前提知識&lt;/h2&gt;
  &lt;/div&gt;
&lt;p&gt;この記事の内容を理解するには、次の知識が必要です。&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Anki の操作方法
特に、Anki というアプリケーションの機能を十分理解した上での操作方法の習熟は必須です。
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Python による開発経験
他の開発言語の経験でも構いませんが、自分で資料を読み Python の開発方法を学べる能力は必要です。
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://rs.luminousspice.com/anki2addons/&#34;&gt;Anki 2.0 アドオンの作成&lt;/a&gt;の内容理解
本文中のサンプルコードを実際に動かしてアドオンを作成する経験があると理解に役立ちます。
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;この記事の最後に &lt;a href=&#34;#review&#34;&gt;Anki アドオン開発のおさらい&lt;/a&gt; という項目を設けて、必要な知識をまとめています。&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&#34;つくるアドオンの要件&#34;&gt;
  &lt;div class=&#34;page-header&#34;&gt;
    &lt;h2&gt;つくるアドオンの要件&lt;/h2&gt;
  &lt;/div&gt;
&lt;p&gt;まず最初にアドオンの要件を決めておきます。&lt;/p&gt;
&lt;p&gt;「復習が終わったら、新たに設定した復習間隔を調べ、熟知なら &#34;Mature&#34; というタグをノートに追加し、それ以外なら  &#34;Mature&#34; を削除します。」&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&#34;モジュールのインポート&#34;&gt;
  &lt;div class=&#34;page-header&#34;&gt;
    &lt;h2&gt;モジュールのインポート&lt;/h2&gt;
  &lt;/div&gt;
&lt;p&gt;最初に必要なモジュールをインポートします。
Anki の復習で解答した時の処理は &lt;a href=&#34;https://github.com/dae/anki/blob/master/anki/sched.py&#34; target=&#34;_new&#34;&gt;sched.py&lt;/a&gt; の中のクラス &lt;code&gt;Scheduler&lt;/code&gt; のメソッド &lt;code&gt;answerCard&lt;/code&gt; で記述しています。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;strong&gt;from&lt;/strong&gt; anki.sched &lt;strong&gt;import&lt;/strong&gt; Scheduler&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;残念ながら復習に関する処理の中にフック (Hook) は存在しません。そこで独自のフックをこのメソッドの最後に追加します。
フックの設置、呼び出しに必要なモジュールをインポートします。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;strong&gt;from&lt;/strong&gt; anki.hooks &lt;strong&gt;import&lt;/strong&gt; addHook, runHook, wrap&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;もちろん &lt;code&gt;answerCard&lt;/code&gt; を書き換えることもできますが、今回の様な条件では独自フックの設置したほうが簡単に記述できます。&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&#34;復習の解答後に処理するフックを設置する&#34;&gt;
  &lt;div class=&#34;page-header&#34;&gt;
    &lt;h2&gt;復習の解答後に処理するフックを設置する&lt;/h2&gt;
  &lt;/div&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;まず、独自のフック &#34;anseweredRevCard&#34; を追加する関数 &lt;code&gt;newAnswerCard()&lt;/code&gt; を定義します。
runHook() はフックを新たに設置する標準の関数です。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;strong&gt;def&lt;/strong&gt; newAnswerCard(self, card, ease):
    runHook(&#39;anseweredRevCard&#39;, self, card)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次に標準の &lt;code&gt;wrap()&lt;/code&gt; 関数を使って、&lt;code&gt;answerCard&lt;/code&gt; の後に &lt;code&gt;newAnswerCard&lt;/code&gt; の内容を追加する処理を記述します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;Scheduler.answerCard = wrap(Scheduler.answerCard, newAnswerCard)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;すると &lt;code&gt;answerCard&lt;/code&gt; の最後に次の行が追加されます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;runHook(&#39;anseweredRevCard&#39;, self, card)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで、復習で解凍した後に処理を呼び出すフックを設置できました。&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&#34;タグを追加_削除する&#34;&gt;
  &lt;div class=&#34;page-header&#34;&gt;
    &lt;h2&gt;タグを追加、削除する&lt;/h2&gt;
  &lt;/div&gt;
&lt;p&gt;復習が終わったら、復習間隔を調べ 21 日以上であったら、&#34;Mature&#34; タグを追加し、それ以外の場合は削除する関数　&lt;code&gt;matureCheck()&lt;/code&gt; を定義します。
熟知の基準日数は変数 &lt;code&gt;threshold&lt;/code&gt; に、設定するタグ文字列は変数 &lt;code&gt;MatureTag&lt;/code&gt; に設定しました。
タグをノートに追加するには &lt;code&gt;Note&lt;/code&gt; クラスのメソッド &lt;code&gt;addTag()&lt;/code&gt; を、削除するには &lt;code&gt;delTag()&lt;/code&gt; を使います。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;i&gt;# Threshold interval for tagging&lt;/i&gt;
threshold = 21
&lt;i&gt;# Tag string for mature note&lt;/i&gt;
MatureTag = u&#34;Mature&#34;

&lt;strong&gt;def&lt;/strong&gt; matureCheck(self, card):
    f = card.note()
    &lt;strong&gt;if&lt;/strong&gt; (card.ivl &amp;gt;= threshold):
        f.addTag(MatureTag)
    &lt;strong&gt;else&lt;/strong&gt;:
        f.delTag(MatureTag)
    f.flush()
    &lt;strong&gt;return&lt;/strong&gt; True&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最後に &lt;code&gt;addHook()&lt;/code&gt; 関数を使って上で作成したカスタムフック &#34;anseweredRevCard&#34;　で &lt;code&gt;matureCheck()&lt;/code&gt; 関数を呼び出す設定をします。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;addHook(&#34;anseweredRevCard&#34;, matureCheck)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで、完成です。完成品は次の通りです。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;strong&gt;from&lt;/strong&gt; anki.hooks &lt;strong&gt;import&lt;/strong&gt; addHook, runHook, wrap
&lt;strong&gt;from&lt;/strong&gt; anki.sched &lt;strong&gt;import&lt;/strong&gt; Scheduler

&lt;i&gt;# Threshold interval for tagging&lt;/i&gt;
threshold = 21
&lt;i&gt;# Tag string for mature note&lt;/i&gt;
MatureTag = u&#34;Mature&#34;

&lt;strong&gt;def&lt;/strong&gt; matureCheck(self, card):
    f = card.note()
    &lt;strong&gt;if&lt;/strong&gt; (card.ivl &amp;gt;= threshold):
        f.addTag(MatureTag)
    &lt;strong&gt;else&lt;/strong&gt;:
        f.delTag(MatureTag)
    f.flush()
    &lt;strong&gt;return&lt;/strong&gt; True

&lt;strong&gt;def&lt;/strong&gt; newAnswerCard(self, card, ease):
    runHook(&#39;anseweredRevCard&#39;, self, card)

Scheduler.answerCard = wrap(Scheduler.answerCard, newAnswerCard)

addHook(&#34;anseweredRevCard&#34;, matureCheck)&lt;/pre&gt;&lt;/div&gt;
&lt;/section&gt;
&lt;section id=&#34;もっとかんたんに書く&#34;&gt;
  &lt;div class=&#34;page-header&#34;&gt;
    &lt;h2&gt;もっとかんたんに書く&lt;/h2&gt;
  &lt;/div&gt;
&lt;p&gt;実は、フックを設置せずに記述を簡略化できます。メソッドを上書きする方法です。
&lt;code&gt;wrap()&lt;/code&gt; 関数で直接 &lt;code&gt;matureCheck&lt;/code&gt; を指定します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;- &lt;strong&gt;def&lt;/strong&gt; newAnswerCard(self, card, ease):
-    runHook(&#39;anseweredRevCard&#39;, self, card)

- Scheduler.answerCard = wrap(Scheduler.answerCard, newAnswerCard)
+ Scheduler.answerCard = wrap(Scheduler.answerCard, matureCheck)

- addHook(&#34;anseweredRevCard&#34;, matureCheck)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この場合は、フックを使わないので、他の関数も追加で呼び出すような追加拡張はできません。&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&#34;ファイルの配置&#34;&gt;
  &lt;div class=&#34;page-header&#34;&gt;
    &lt;h2&gt;ファイルの配置&lt;/h2&gt;
  &lt;/div&gt;
&lt;p&gt;完成したファイル Mature_Tag.py を動作させるには、&lt;code&gt;Documents/Anki/addons&lt;/code&gt; フォルダの中に保存します。Anki を再起動すると、この Python スクリプトファイルを読み込みます。&lt;/p&gt;
&lt;p&gt;アドオンが読み込まれるとメニューバーに [ツール]-[アドオン]-[Mature_Tag] という項目が追加されます。&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&#34;ankiweb_の共有アドオン一覧に登録する&#34;&gt;
  &lt;div class=&#34;page-header&#34;&gt;
    &lt;h2&gt;AnkiWeb の共有アドオン一覧に登録する&lt;/h2&gt;
  &lt;/div&gt;
&lt;p&gt;作成したアドオンを AnkiWeb に公開して、アドオン一覧に登録する方法を紹介します。
まず、&lt;a href=&#34;https://ankiweb.net/shared/addons/&#34; target=&#34;_new&#34;&gt;共有アドオン一覧&lt;/a&gt;を開き、AnkiWeb にサインインします。&lt;/p&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;http://rs.luminousspice.com/images/anki_addon_tutorial_1.png&#34; alt=&#34;アドオン一覧&#34; width=&#34;60%&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;title&#34;&gt;図 1. 共有アドオン一覧&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;登録フォームは画面右上の [Upload Add-on] ボタンをクリックすると表示します。&lt;/p&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;http://rs.luminousspice.com/images/anki_addon_tutorial_2.png&#34; alt=&#34;登録フォーム&#34; width=&#34;60%&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;title&#34;&gt;図 2. アドオン登録フォーム&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;このフォームでは次のように項目入力します。&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;Title:&lt;/strong&gt; アドオンの名前を入力します。アドオン一覧に表示する名前にになります。
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;File:&lt;/strong&gt; 登録したいアドオンの Python スクリプトを選択します。今回の例では &lt;code&gt;Mature_Tag.py&lt;/code&gt; です。
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;Description&lt;/strong&gt; アドオンユーザーのためにアドオンの機能や使い方の説明を入力します。
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;入力が済んだら [Upload] を押すと登録できます。特に AnkiWeb に障害がなければ即座に公開されます。
登録したアドオンのページに移動します。&lt;/p&gt;
&lt;p&gt;公開したアドオンのページの下にある [Update] ボタンを押すと登録内容の編集ができ、[Remove] ボタンを押すとアドオンを削除することができます。&lt;/p&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;http://rs.luminousspice.com/images/anki_addon_tutorial_3.png&#34; alt=&#34;アドオンページ 編集、削除ボタン&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;title&#34;&gt;図 3. アドオンページ 編集、削除ボタン&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id=&#34;まとめ&#34;&gt;
  &lt;div class=&#34;page-header&#34;&gt;
    &lt;h2&gt;まとめ&lt;/h2&gt;
  &lt;/div&gt;
&lt;p&gt;「Anki 2.0 アドオンの作成」で説明しているとおり、Anki が標準で用意しているフックを利用すると Anki の機能の修正や追加が簡単になります。フックが用意されていない箇所にも、この記事で紹介した方法で自分でカスタムのフックを自由に追加することができます。フックの使い方になれると Anki アドオン作成するを能力が向上し、Anki 自身の機能についても理解を深めることができます。&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&#34;review&#34;&gt;
  &lt;div class=&#34;page-header&#34;&gt;
    &lt;h2&gt;遺補: Anki アドオン開発のおさらい&lt;/h2&gt;
  &lt;/div&gt;
&lt;p&gt;Anki のアドオンは、Python スクリプトで記述し、&lt;code&gt;Documents/Anki/addons&lt;/code&gt; フォルダの中に保存します。
Anki に Python インタープリタが含まれているため、アドオンの開発に Python のインストールは必要ありません。&lt;/p&gt;
&lt;p&gt;Anki は起動時に &lt;code&gt;addons&lt;/code&gt; フォルダの中の &lt;code&gt;.py&lt;/code&gt; ファイルを読み込みます。
従って、新たにアドオンファイルを追加した場合、再起動して初めて機能するようになります。
なお、シフトキーを押したまま Anki を起動すると、アドオンファイルの読み込みは行いません。&lt;/p&gt;
&lt;p&gt;Anki には、WordPress のようにフック (Hook) という機能を提供していて、標準機能を拡張したり、変更したりするアドオン開発が容易にできます。Anki 自身もたくさんのフックを利用しています。&lt;/p&gt;
&lt;p&gt;アドオンをつくるために Anki が用意している関数は次の通りです。&lt;/p&gt;
&lt;table rules=&#34;rows&#34; frame=&#34;hsides&#34;cellspacing=&#34;0&#34; cellpadding=&#34;4&#34;&gt;
&lt;caption class=&#34;title&#34;&gt;表 1. アドオン開発用関数&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col class=&#34;span1&#34;&gt;
&lt;col class=&#34;span4&#34;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;関数名&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;runHook&lt;/td&gt;
&lt;td&gt;フックを実行する。値は返さない。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;runFilter&lt;/td&gt;
&lt;td&gt;フィルターを実行し値を返す。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;addHook&lt;/td&gt;
&lt;td&gt;フックを追加する。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;remHook&lt;/td&gt;
&lt;td&gt;フックを削除する。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;wrap&lt;/td&gt;
&lt;td&gt;既存の関数を上書きする。第3引数でオリジナルの関数の位置を指定。既定はオリジナルの後にカスタム関数を実行する。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;フックを見つけるには、Anki のソースコードを　&#34;runHook&#34;、&#34;runFilter&#34; で検索します。Anki 2.0.20 現在　36 のフックが存在します。&lt;/p&gt;
&lt;p&gt;フックの使い方を詳しく知るには、&lt;a href=&#34;http://rs.luminousspice.com/anki2addons/&#34;&gt;Anki 2.0 アドオンの作成&lt;/a&gt;、および &lt;a href=&#34;https://github.com/dae/anki/blob/master/anki/hooks.py&#34; target=&#34;_new&#34;&gt;anki/hooks.py&lt;/a&gt; をお読みください。&lt;/p&gt;
&lt;/section&gt;
</content>
    </item>
    
  </channel>
</rss>
