<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>the Right Stuff</title>
    <link>http://rs.luminousspice.com/tags/mac/index.xml</link>
    <description>the Right Stuff</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <atom:link href="https://pubsubhubbub.superfeedr.com" rel="hub"/>
    <atom:link href="https://pubsubhubbub.appspot.com/" rel="hub"/>
    <atom:link href="/tags/mac/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>MSDN Magazine過去10年分の頻出語彙からAnki単語帳を作る</title>
      <link>http://rs.luminousspice.com/frequent-words-in-msdn-magazine-in-10years/</link>
      <pubDate>Fri, 07 Jun 2013 22:30:38 +0900</pubDate>
      <guid>http://rs.luminousspice.com/frequent-words-in-msdn-magazine-in-10years/</guid>
      <description>以前の記事では、過去3年分のMSDN Magazineの記事のコーパス分析から頻出語彙表を作成し、Anki単語帳に加工する方法を紹介しました。前回手をつけなかったCHMファイルをコーパスに取り込み過去10年に遡った分析し [&amp;hellip;]</description>
      <content>&lt;section id=&#34;msdn_magazine過去10年分の頻出語彙からanki単語帳を作る&#34;&gt;
&lt;p&gt;以前の記事では、過去3年分のMSDN Magazineの記事のコーパス分析から頻出語彙表を作成し、Anki単語帳に加工する方法を紹介しました。前回手をつけなかったCHMファイルをコーパスに取り込み過去10年に遡った分析します。前回作成したMSDN Word Listからの差分は102語になりました。&lt;/p&gt;
&lt;div class=&#34;sidebarblock well&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;p&gt;&lt;a href=&#34;http://ankisrs.net/&#34;&gt;Anki&lt;/a&gt;とはDamien Elmesが開発している分散学習システム(SRS; Spaced Repetition learning Systems)です。&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&#34;おことわり&#34; class=&#34;section&#34;&gt;おことわり&lt;/h2&gt;
&lt;div class=&#34;sidebarblock well&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;p&gt;この記事は、楽しむことを目的とした内容で、学術的な厳密性を考慮していません。&lt;/p&gt;
&lt;p&gt;MSDNは、Microsoft Corporationの商標であり、
MSDN Magazineは、1105 Media, Inc.の出版物です。&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&#34;使うもの&#34; class=&#34;section&#34;&gt;使うもの&lt;/h2&gt;
&lt;div class=&#34;ulist&#34;&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://ankisrs.net/&#34;&gt;Anki2&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://msdn.microsoft.com/en-us/magazine/default.aspx&#34;&gt;MSDN Magazine&lt;/a&gt; BackNumber 2003.01 - 2009.07
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
コンコーダンサーソフト (この記事の作成には、&lt;a href=&#34;https://sites.google.com/site/casualconcj/Home&#34;&gt;CasualConc&lt;/a&gt;を使いました。)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
表計算ソフト (この記事の作成には、&lt;a href=&#34;http://ja.libreoffice.org/&#34;&gt;LibreOffice Calc&lt;/a&gt;を使いました。)
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;h2 id=&#34;はじめに&#34; class=&#34;section&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;以前の記事、&lt;a href=&#34;http://rs.luminousspice.com/frequent-words-in-msdn/&#34;&gt;Windows開発者の必修語彙をAnki学習する方法&lt;/a&gt;ではMSDN MagazineのバックナンバーのうちPDF化されている過去3年分について、コーパス分析を行いました。
コンコーダンサーソフトに読み込む作業の煩雑さから、CHM(Microsoft Compiled HTML Help)形式のファイルは対象としませんでした。&lt;/p&gt;
&lt;p&gt;今回は、CHMファイルをPDFに変換してコンコーダンサーに読み込む方法に挑戦します。&lt;/p&gt;
&lt;p&gt;2003年のバックナンバーを改めて読んでみました。.NET Framework 1.1とWindows XP SP2(Springboard)という現在のWindowsプラットフォームの基盤となる製品がリリースした頃です。ここまで遡ってコーパスデータを分析すれば、ほぼWindowsプラットフォームの技術文書に特有な語彙は網羅できるだろうと考えました。&lt;/p&gt;
&lt;p&gt;内容の面での代表性を考えるとSpringboardまで遡らないと不十分なのではと、気になっていました。&lt;/p&gt;
&lt;p&gt;CHMファイル数は79で、今回の拡張で前回の分析データから3倍に増加します。&lt;/p&gt;
&lt;p&gt;分析前の予想として、高頻度の語彙の使用がさらに集中して、使用語彙の98%に入る頻出語彙の種類は減るだろうというと考えています。実際に確認してみました。&lt;/p&gt;
&lt;h2 id=&#34;chmファイルの変換&#34; class=&#34;section&#34;&gt;CHMファイルの変換&lt;/h2&gt;
&lt;p&gt;CHMファイルを分解して取り出す正統的な方法は&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ms669985.aspx&#34;&gt;Help Workshop&lt;/a&gt;を使う方法です。この方法だと手作業の部分が非常に多くなるため二の足を踏んでいました。&lt;/p&gt;
&lt;p&gt;なにかCHMファイルをコンバートする上手い方法はないだろうかと探していたところ、pdfに変換してくれるアプリケーションが見つかりました。&lt;a href=&#34;http://code.google.com/p/ichm/&#34;&gt;iChm&lt;/a&gt;というMac OS X上のCHMビューアーと&lt;a href=&#34;http://code.google.com/p/chm2pdf/&#34;&gt;chm2pdf&lt;/a&gt;という変換用Pythonスクリプトです。&lt;/p&gt;
&lt;p&gt;心情的にはchm2pdfを使って、シェルスクリプトで一括処理したかったのですが、MSDN Magazineの1冊分のファイル容量では大きすぎて、chm2pdfはエラーをはきます。そこで残念ながら79個のファイルを手作業でiChmを使って、pdfに書き出しました。&lt;/p&gt;
&lt;p&gt;なお、chm2pdfのMac OS X上でのビルド方法について情報がインターネット上にほとんどなかったので、この記事の最後に補足として記録しておきます。&lt;/p&gt;
&lt;h2 id=&#34;コンコーダンサーcasualconcへの読み込み&#34; class=&#34;section&#34;&gt;コンコーダンサーCasualConcへの読み込み&lt;/h2&gt;
&lt;p&gt;pdf化したバックナンバーをCasualConcで既存のコーパスデータベースに追加します。
前回はデータベースの新規作成を行いましたが、今回はデータの追加なので作業手順が若干異なります。&lt;/p&gt;
&lt;p&gt;今回のデータを別のデータベースとして新規作成する方法もあります。手順は前回と同じです。
この場合は、頻度表をカウントする時に複数のデータベースを指定する必要があります。&lt;/p&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;http://rs.luminousspice.com/images/msdnwl1.png&#34; alt=&#34;ファイルツール&#34; width=&#34;600&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;title&#34;&gt;図 1. CasualConc ファイルツール画面&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;title&#34;&gt;コーパス作成手順 (図1)&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
画面上[ファイル]タブをクリックしてファイルツールを表示する。
&lt;/li&gt;
&lt;li&gt;
右上画面下[追加]ボタンでコーパス化するファイルを選択する。
&lt;/li&gt;
&lt;li&gt;
左下画面下[追加リストから追加]ボタンを押すとコーパスが作成できます。
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ここで、登録済みのデータを重複して登録するかというダイアログが表示される場合があります。ディレクトリ内に以前作業したファイルが残っている場合などですが、[すべていいえ]を選択してください。&lt;/p&gt;
&lt;p&gt;その後の手順は、&lt;a href=&#34;http://rs.luminousspice.com/frequent-words-in-msdn/&#34;&gt;Windows開発者の必修語彙をAnki学習する方法&lt;/a&gt;の通りです。&lt;/p&gt;
&lt;h2 id=&#34;10年分に対象を拡大した結果&#34; class=&#34;section&#34;&gt;10年分に対象を拡大した結果&lt;/h2&gt;
&lt;p&gt;頻度順に語彙を並べて、コーパス全体に占める割合を足していくと2754番目に98%に達します。登場回数は77が最小値です。
そこから、一般的に高頻度な語彙(GSL+BNC2K)と学術的に高頻度な語彙を除き、MSDN Magazineに特有な頻出語彙662語を抽出しました。&lt;/p&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;http://rs.luminousspice.com/images/msdnwl10y1.png&#34; alt=&#34;MSDN Magazine コーパスの内訳&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;title&#34;&gt;図 2. MSDN Magazine 過去10年分の使用語彙の内訳&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;さて、最初の予想はどうなったかというと、直近3年分の分析結果から180語が外れて、100語が追加になりました。&lt;/p&gt;
&lt;p&gt;10年のスパンで見ると頻出語句だけど、この3年では頻出語句からものは、gadget、cursor、virus、KB、LOB、fuzzy、RPC、enumeratorなどが含まれていて、時代を感じさせる言葉です。
この3年で頻出語句に入ってきたものは、geographic、multicore、affiliate、gpu、ubiquitous、taxonomy、prototypeなどです。SEOなどのバズワードも入っています。&lt;/p&gt;
&lt;p&gt;技術の進歩や市場の関心の変化が反映していることが読み取れました。&lt;/p&gt;
&lt;p&gt;当初は、10年分の分析結果の語彙表を決定版として、3年分のデータを置き換えようと考えていました。
多くのコーパス分析の対象は、過去に向いて文学作品など固定した文書ですが、今自分が扱っているのは生ものの文字情報なのだということに気づきました。&lt;/p&gt;
&lt;p&gt;未来に向けて、予言する訳ではないですが、これから出てくるであろう文書を読むための語彙を調べようという趣旨なので、直近3年分のデータを正本として、10年分のデータは補足資料として扱おうと方針転換しました。
ほとんど無駄な努力だったかもです。この脱力感がたまらない。同時に直近3年分のデータからの結果に自信を持ちました。&lt;/p&gt;
&lt;p&gt;直近3年の頻出語句からもれた102語を補足データとして、&lt;a href=&#34;http://ankisrs.net/&#34;&gt;Anki&lt;/a&gt;単語帳のパッケージデータにしました。Level3というタグを付加しています。&lt;/p&gt;
&lt;h2 id=&#34;完成品のダウンロード&#34; class=&#34;section&#34;&gt;完成品のダウンロード&lt;/h2&gt;
&lt;p&gt;この記事で作成した差分の単語帳は、&lt;a href=&#34;http://rs.luminousspice.com/apkg/msdnwl_adx.apkg&#34;&gt;Anki単語帳パッケージ msdnwl_adx.apkg (15.2KB)&lt;/a&gt;をダウンロードしてお使いいただけます。
子単語帳`MSDNWords::Level3`として作成していますので、既にダウンロード済みの単語帳に追加して使うことができます。&lt;/p&gt;
&lt;p&gt;全体の単語帳は、&lt;a href=&#34;http://nossl.ankiweb.net/shared/download/722400168&#34; rel=&#34;nofollow&#34; onclick=&#34;ga(&#39;send&#39;, &#39;event&#39;, &#39;Downloads&#39;, &#39;AKPG&#39;, &#39;MSDNワードリスト&#39;);&#34;&gt;Anki単語帳パッケージ&lt;/a&gt;をダウンロードしてお使いいただけます。&lt;/p&gt;
&lt;p&gt;この単語帳を使うにはAnkiのインストールが必要です。&lt;a href=&#34;http://ankisrs.net/&#34;&gt;Ankiサイト&lt;/a&gt;から最新版をダウンロードできます。Ankiは、Windows、Mac、Linux/BSD、iOS、Androidに対応しています。その他のデバイスからはAnkiWebを通じて利用可能です。詳しくはAnkiサイトをご覧ください。&lt;/p&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;http://rs.luminousspice.com/images/msdnwl10y2.png&#34; alt=&#34;完成品画面&#34; width=&#34;400&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;title&#34;&gt;図 3. 完成品画面&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;このAnki単語帳の使い方については、&lt;a href=&#34;http://rs.luminousspice.com/frequent-words-in-msdn/&#34;&gt;Windows開発者の必修語彙をAnki学習する方法&lt;/a&gt;をご覧ください。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34; class=&#34;section&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;テキストデータをより広範に収集できれば、頻度表の品質を向上させることができます。
その際には目的にかなった対象を選ぶことが大切です。&lt;/p&gt;
&lt;p&gt;当初の目論みから方針転換はしましたが、取得したデータの内容から、この分野の頻出語彙集の決定版だと思っています。&lt;/p&gt;
&lt;p&gt;個人としてできることは、あとはSDKのドキュメントなどからコーパスデータを作って個別製品の開発に特化したより分野の狭い専門語彙を見つけ出すことだと思います。
全てのSDKドキュメントを集めて、合算して分析する発想もありますが、今回の結果と大きな差でないのではないかと思います。
但し、全SDKドキュメントのコーパスの作成は、今回の様な頻出語彙を取り出すのではなくて、もっと広範で高度なコーパス分析には意義があると思います。&lt;/p&gt;
&lt;p&gt;頻度表を得るために作ったコーパスをKWIC分析やN-gram分析を掛けると、その語彙の語義だけでは分からない、MSDNのコンテキストの中での、その語彙の振る舞いが一覧にして理解できるようになります。この情報は語彙学習の面で極めて強力でだと思います。サンプルのソースコードも一緒に見ることができます。&lt;/p&gt;
&lt;p&gt;もし、自分でコーパスを作ってみた方は、ぜひ頻度表を作った後も、コーパスをメンテナンスして語彙学習に活用してみてください。楽しくなってくると思います。いつか機会があれば、そんな内容の記事が書けたら良いなと持っています。&lt;/p&gt;
&lt;p&gt;CasualConcは、PDF以外にも、HTML、XML、Web Archive、RTF、Microsoft Word、OASIS OpenDocument Textなどの直接的な読み込みをサポートしています。
テキストファイルへの変換が面倒な場合でも、上記のいずれかのフォーマットに持ち込めれば、コーパスを簡単に作成できます。&lt;/p&gt;
&lt;p&gt;また、複数のコーパスデータベースを管理して、データベース間にまたがって分析することも簡単にできます。&lt;/p&gt;
&lt;p&gt;自分の目的にあったデータを見つけ出して、もっと自由にAnkiを楽しんでください。&lt;/p&gt;
&lt;h2 id=&#34;補遺_chm2pdfのmac_os_xへのインストール方法&#34; class=&#34;section&#34;&gt;補遺 chm2pdfのMac OS Xへのインストール方法&lt;/h2&gt;
&lt;p&gt;Pythonスクリプト&lt;a href=&#34;http://code.google.com/p/chm2pdf/&#34;&gt;chm2pdf&lt;/a&gt;の前提条件は次の3点です。&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/jedwing/CHMLib&#34;&gt;chmlib&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;http://gnochm.sourceforge.net/pychm.html&#34;&gt;pychm&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
htmldoc
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;htmldocは、&lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;から入手できるので、chmlib、pychmのみ自力でインストールしました。
Pythonはシステムに付属しているものではなく、&lt;a href=&#34;https://github.com/utahta/pythonbrew&#34;&gt;pythonbrew&lt;/a&gt;からインストールしたPython 2.7.3を使いました。&lt;/p&gt;
&lt;h3 id=&#34;chmlib&#34;&gt;chmlib&lt;/h3&gt;
&lt;p&gt;Mac OS Xでのインストール方法が &lt;code&gt;INSTALL&lt;/code&gt; ファイルに書かれています。
更に、chm2pdfの &lt;code&gt;README&lt;/code&gt; に書かれている通り、 Makefileを作る時に `./configure --enable-examples`オプションが必要です。MacPortから入手できるものはこのオプションがないそうです。&lt;/p&gt;
&lt;h3 id=&#34;pychm&#34;&gt;pychm&lt;/h3&gt;
&lt;p&gt;pychmは、`README`に書かれている方法でインストールし、シェルの環境変数を設定します。&lt;/p&gt;
&lt;p&gt;最後にchm2pdfの &lt;code&gt;README&lt;/code&gt; に書いてある方法でインストールします。
ターミナルから次のように入力して使います。
&lt;code&gt;chm2pdf (--book / --webpage/) [options] input_filename [output_filename]&lt;/code&gt;&lt;/p&gt;
&lt;/section&gt;
</content>
    </item>
    
    <item>
      <title>Zencoding Automator Services</title>
      <link>http://rs.luminousspice.com/zencoding-automator-services/</link>
      <pubDate>Mon, 06 Aug 2012 20:49:29 +0900</pubDate>
      <guid>http://rs.luminousspice.com/zencoding-automator-services/</guid>
      <description>ZenCodingサービスをautomatorと既存のPerl実装を利用して作ったよ。</description>
      <content>&lt;p&gt;Mac OS Xのサービス機能を使って、ZenCodingサービスを作りました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://rs.luminousspice.com/zen-coding-with-mi/&#34;&gt;前回の記事&lt;/a&gt;のコードを書いていて、更に汎用的なautomatorのサービスにすると便利だと思い、作り直してみました。&lt;/p&gt;

&lt;p&gt;&lt;img c src=&#34;http://rs.luminousspice.com/images/zencoding-service.png&#34; alt=&#34;完成図&#34; /&gt;&lt;/a&gt;
&lt;strong&gt;図 1. 完成図&lt;/strong&gt;
&lt;h2&gt;はじめにご理解いただきたいこと&lt;/h2&gt;
&lt;p&gt;この記事で作成するアプリケーションは、Mac OS X 10.7.4、このOSに付属しているPerl 5.12.3とAutomator 2.2.4を使って作成しました。利用環境の違いによっては動作しない場合も予想されます。この記事は、自分の環境で動作するように一人で修正できる方に向けて書いています。&lt;/p&gt;
&lt;h2&gt;準備作業&lt;/h2&gt;
&lt;p&gt;前提条件としてOtchyさん作&lt;a href=&#34;http://www.otchy.net/20100225/zen-coding-for-perl/&#34;&gt;SSSCoding.pm&lt;/a&gt;のインストールが必要です。
のPerlモジュールのインストール先は、たとえばターミナルから次のコマンドで調べることが出来ます。&lt;/p&gt;
&lt;pre&gt;perl -e &amp;lsquo;print $i++ . &amp;ldquo;:&amp;rdquo; . &amp;ldquo;$_\n&amp;rdquo; foreach @INC&amp;rsquo;&lt;/pre&gt;
&lt;p&gt;Mac OS X 10.7 では、/Library/Perl/5.12 でした。&lt;/p&gt;
&lt;h2&gt;Automatorでサービスを作る&lt;/h2&gt;
&lt;p&gt;automatorでサービス ワークフローを作成します。&lt;/p&gt;
&lt;p&gt;サービスは次の項目を選択項目を受け取ります：の項目は、&lt;strong&gt;テキスト&lt;/strong&gt;、検索対象：&lt;strong&gt;全てのアプリケーション&lt;/strong&gt;　にします。&lt;/p&gt;
&lt;p&gt;次に&lt;strong&gt;シェルスクリプトを実行&lt;/strong&gt;というアクションを追加し、Perlのコードを入力します。
    次の画像のようになります。&lt;/p&gt;
&lt;img src=&#34;http://rs.luminousspice.com/images/zencoding-services-workflow.png&#34; alt=&#34;Automatorワークフロー画面&#34; /&gt;&lt;/a&gt;
&lt;strong&gt;図 2. Automatorワークフロー画面&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;中身のコードは次のように書きました。
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;use SSSCoding;&lt;/p&gt;

&lt;p&gt;@tags = split(/\x0d|\x0a/, @ARGV[0]);&lt;/p&gt;

&lt;p&gt;foreach (@tags) {
    print SSSCoding::expand($_).&amp;rdquo;\x0d&amp;rdquo;;
}&lt;/pre&gt;&lt;/div&gt;
&lt;strong&gt;List. ZenCoding.workflow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;このワークフローを保存すれば、サービスとして使えるようになります。この際に指定した名前がサービスの中で表示される名前になります。文字列を選択すると、サービスのメニューにその名前が表示されます。システム環境 - キーボードでショートカットを登録することも出来ます。&lt;/p&gt;
&lt;h2&gt;完成品のワークフローファイルをそのままインストールする&lt;/h2&gt;
&lt;p&gt;完成品のworkflowファイルは、&lt;a title=&#34;github&#34; href=&#34;https://github.com/luminousspice/Zen-Coding-Services&#34; target=&#34;_blank&#34;&gt;githubからダウンロードできるようにしました&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;このファイルを開くと、インストールのためのダイアログが表示されます。手作業でインストールするのであれば、~/Library/Services/ に置くと機能するようになります。&lt;/p&gt;
&lt;img src=&#34;http://rs.luminousspice.com/images/zencoding-services-installer.png&#34; alt=&#34;インストールダイアログ&#34; /&gt;
&lt;strong&gt;図 3. インストールダイアログ&lt;/strong&gt;

&lt;h2&gt;どこでも使えるよ&lt;/h2&gt;
&lt;p&gt;これで、miでも、テキストエディットでも、スティッキーズでも、このブログを書いているFireforx上の入力画面でも、Mac OS Xのサービスが利用できるところはどこでも、ZenCodingの省略記法の展開が出来るようになりました。なんて素晴らしいんでしょう。&lt;/p&gt;

&lt;p&gt;WordPress上での編集については、&lt;a href=&#34;http://code.google.com/p/zen-coding/&#34;&gt;Zen Coding for &amp;lt;textarea&amp;gt;&lt;/a&gt;をWordPressのプラグイン化した&lt;a href=&#34;http://wordpress.org/extend/plugins/wp-zen-coding/&#34;&gt;WP Zen-Coding&lt;/a&gt;が公開されています。これを使うと今回作成した省略記法の展開以外の全ての機能が使えるようです。&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;ありがとう&lt;/h2&gt;
Perl実装した&lt;a href=&#34;http://www.otchy.net/&#34;&gt;Otchyさん&lt;/a&gt;、ありがとうございます。たったPerl7行でやりたいことが出来てしまった。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>ZenCoding with mi</title>
      <link>http://rs.luminousspice.com/zen-coding-with-mi/</link>
      <pubDate>Sun, 05 Aug 2012 23:20:40 +0900</pubDate>
      <guid>http://rs.luminousspice.com/zen-coding-with-mi/</guid>
      <description>miでZenCodingする方法。既存のPerl実装を利用して、ツールをAppleScriptで書きます。</description>
      <content>&lt;hr&gt;

&lt;p&gt;&lt;h3&gt;ご注意:&lt;/h3&gt;
2013.5.30追記
miの最新版、&lt;a href=&#34;http://www.mimikaki.net/&#34; target=&#34;_blank&#34;&gt;mi3&lt;/a&gt;ではZencodingの機能が実装になりました。この記事で取り上げている内容よりも豊富な機能を提供しています。ぜひmi3を使ってください。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rs.luminousspice.com/images/mi3.png&#34; alt=&#34;mi3&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;h4&gt;mi3のZencoding機能を使う方法&lt;/h4&gt;
&lt;p&gt;機能の呼び出し方は、ドキュメントモードを[HTML]か[HTML5]に設定した上で、展開したい箇所を選択して(Control+Command+E)を押します。&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;ドキュメントモードの設定方法はドキュメントウィンドウ上部のプルダウンリストから選択するか、メニューバーから[ドキュメント]&gt;[モード]&gt;[HTML5]/[HTML]を選択します。
    &lt;/p&gt;
&lt;p&gt;メニューバーから[ツール]&gt;[HTML]&gt;[_zencoding]を選択すると、下図のような展開以外の機能を呼び出すことができます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rs.luminousspice.com/images/mi3zencoding.png&#34; alt=&#34;mi3zencoding&#34; /&gt;&lt;/p&gt;

&lt;p&gt;この記事は、役割を終えたことになります。&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;miでもZenCodingしたい&lt;/h2&gt;
&lt;p&gt;と思い続けていたところ、&lt;a href=&#34;http://d.hatena.ne.jp/makog/20110706/1309969364&#34;&gt;Jedit Xで動作させている記事&lt;/a&gt;を発見しました。&lt;/p&gt;
&lt;p&gt;この記事によれば、作者のmakogさんは、OtchyさんのZencodingの&lt;a href=&#34;http://www.otchy.net/20100225/zen-coding-for-perl/&#34;&gt;Perlモジュール実装&lt;/a&gt;を使って、Jedit XのマクロをAppleScriptで作成したそうです。アクションの内、省略記法の展開が使えるようになっています。
おお、素晴らしい、miで使うのに一気に敷居が下がりました。&lt;/p&gt;

&lt;p&gt;そこで、この記事を参考にmi用にAppleScriptを書き起こしました。miのツールにzencodingの機能を追加できました。&lt;/p&gt;
&lt;img src=&#34;http://rs.luminousspice.com/images/mi-zencoding.png&#34; alt=&#34;完成図&#34; /&gt;
&lt;strong&gt;図 1. 完成図&lt;/strong&gt;


&lt;h2&gt;はじめにご理解いただきたいこと&lt;/h2&gt;

&lt;p&gt;この記事で作成するアプリケーションは、Mac OS X 10.7.4、このOSに付属しているPerl 5.12.3とAutomator 2.2.4を使って作成し、mi 2.1.12r1で動作確認しました。利用環境の違いによっては動作しない場合も予想されます。この記事は、自分の環境で動作するように一人で修正できる方に向けて書いています。&lt;/p&gt;

&lt;h2&gt;準備作業&lt;/h2&gt;

&lt;p&gt;前提条件として&lt;a href=&#34;http://www.otchy.net/20100225/zen-coding-for-perl/&#34;&gt;SSSCoding.pm&lt;/a&gt;のインストールが必要です。
    このPerlモジュールのインストール先は、たとえばターミナルから次のコマンドで調べることが出来ます。&lt;/p&gt;
&lt;pre&gt;perl -e &#39;print $i++ . &#34;:&#34; . &#34;$_\n&#34; foreach @INC&#39;&lt;/pre&gt;
Mac OS X 10.7 では、/Library/Perl/5.12 でした。

&lt;h2&gt;mi用AppleScriptの作成&lt;/h2&gt;

&lt;p&gt;miのヘルプの説明を参考にAppleScriptを次のように書きました。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;tell document 1 of application &#34;mi&#34;
    set startP to index of paragraph 1 of selection object 1
    set endP to startP + (count paragraph of selection object 1) - 1
    repeat with i from startP to endP
        set str to paragraph i
        set res1 to do shell script &#34;perl -e &#39;chomp($ARGV[0]);print $ARGV[0];&#39;&#34; &amp;amp; &#34; &#34; &amp;amp; quoted form of str
        set res to do shell script &#34;perl -MSSSCoding -e &#39;print SSSCoding::expand($ARGV[0]);&#39;&#34; &amp;amp; &#34; &#34; &amp;amp; quoted form of res1
        set paragraph i to res &amp;amp; (ASCII character 10)
    end repeat
end tell&lt;/pre&gt;&lt;/div&gt;
&lt;strong&gt;表 1. zencoding.scpt&lt;/strong&gt;

&lt;h2&gt;インストール&lt;/h2&gt;
&lt;p&gt;このスクリプトをAppleScript エディタで、スクリプト(.scpt)形式で保存します。
そのファイルを、モード設定ウインドウ→ツールタブの左側のツール一覧にドラッグすると使えるようになります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rs.luminousspice.com/images/mi-mode-setting.png&#34; alt=&#34;インストール先-モード設定ウィンドウ&#34;  /&gt;
&lt;strong&gt;図 2. インストール先-モード設定ウィンドウ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;手作業でインストールする場合は、標準モードのツールとして使うなら、
    &lt;code&gt;~/Library/Application Support/mi/mode/Normal/tool&lt;/code&gt;
になります。 &lt;/p&gt;

&lt;p&gt;ZenCodingの省略記法した箇所を選択して、メニューから&lt;strong&gt;ツール&lt;/strong&gt;-&lt;strong&gt;zencoding&lt;/strong&gt;と選択してツールを実行するすると、選択範囲が展開されます。また、コンテクストメニューからも同様に選択して実行できます。(図 1. 完成図 参照)
    これで、miでZenCodingするという目的が達成できました。&lt;/p&gt;

&lt;p&gt;なお、今回実装した省略記法の展開以外にも、ZenCodingの&lt;a href=&#34;http://code.google.com/p/zen-coding/wiki/Actions&#34;&gt;アクション&lt;/a&gt;には、編集箇所の移動など便利な機能が含まれています。&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;完成品も用意しました&lt;/h2&gt;
&lt;a href=&#34;https://github.com/luminousspice/zencoding-mi&#34;&gt;GitHubにscptファイルの完成品を置きました&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;ところが&lt;/h2&gt;
&lt;p&gt;作っているうちに、これをautomatorのサービスにした方が便利なのでは感じるようになりました。miに限らずどこでも使えるし。そこで次の記事では、&lt;a href=&#34;http://rs.luminousspice.com/zencoding-automator-services/&#34;&gt;automatorサービスを作る方法&lt;/a&gt;を紹介します。&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;ありがとう&lt;/h2&gt;
&lt;p&gt;Perl実装した&lt;a href=&#34;http://www.otchy.net/&#34;&gt;Otchyさん&lt;/a&gt;、Jedit Xマクロを書いた&lt;a href=&#34;http://d.hatena.ne.jp/makog/&#34;&gt;makogさん&lt;/a&gt;、素晴らしい。
たったAppleScript10行でやりたいことが出来てしまった。ありがとうございます。&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;このブログを建てて記事を書いたのは、お二方に対する感謝の気持ちであります。&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
