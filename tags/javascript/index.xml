<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on the Right Stuff</title>
    <link>http://rs.luminousspice.com/tags/javascript/</link>
    <description>Javascript | the Right Stuff</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Fri, 01 Apr 2016 21:27:23 +0900</lastBuildDate>
    <atom:link href="https://pubsubhubbub.superfeedr.com" rel="hub"/>
    <atom:link href="https://pubsubhubbub.appspot.com/" rel="hub"/>
    <atom:link href="http://rs.luminousspice.com/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Hugo に全文検索を取り付けた</title>
      <link>http://rs.luminousspice.com/hugo-site-search/</link>
      <pubDate>Fri, 01 Apr 2016 21:27:23 +0900</pubDate>
      <guid>http://rs.luminousspice.com/hugo-site-search/</guid>
      <description>静的サイトジェネレータ Hugo を使って生成したコンテンツに 全文検索を取り付けました。Hugo からコンテンツと一緒にインデックスファイルも同時に書き出し、クライアント側の JavaScript で日本語のキーワードを検索をします。</description>
      <content>&lt;div id=&#34;preamble&#34;&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;静的サイトジェネレータ Hugo を使って生成したコンテンツに 全文検索を取り付けました。Hugo でのコンテンツと一緒にインデックスファイルも同時に書き出し、クライアント側の JavaScript で日本語のキーワードを検索をします。&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;この件は、ゼロベースから考えました。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;ちょうど WordPress で運用していたデータを静的ジェネレータ (SSG) の &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; に移行し、CI を使って GitHub Pages 上に展開したところです。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;最低限の CSS だけのテンプレートを使って静的なページを作っているので、JavaScript を使うにしても出来る限り絞り込みたいというのが、前提条件でした。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;元原稿は AsciiDoc の集まりなので、そこからインデックスファイルを作り、このファイルを JavaScript で検索するページを作ればよいだろうとザックリと考えました。サイトのコンテンツの規模は、1.2MB、70 ファイルです。&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_javascript_で全文検索&#34;&gt;JavaScript で全文検索&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;JavaScript の日本語の全文検索について調べていたところ、 &lt;a href=&#34;http://la.ma.la/search.html&#34;&gt;JavaScriptにBlogの全文検索をやらせてみるテスト&lt;/a&gt; を見つけました。事前にインデックスファイルを JavaScript のオプジェクトとして保存し、クライアント側で検索する作りになっています。
高速に検索し、使い勝手が気に入りました。これを自分の Hugo のコンテンツと一緒に使えないかと考えました。なお、再利用と改変について作者ご本人から直接承諾を得ました。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;このサイトでも、派生系のスクリプトでも、インデックスを生成するためのスクリプトを別途走らせています。この部分もSSG にやらせたいと考えました。ページを生成するのも、インデックスファイルを生成するのも大差ないのですから。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;&lt;strong&gt;参考:&lt;/strong&gt; &lt;a href=&#34;http://la.ma.la/blog/diary_200506252348.htm&#34;&gt;最速インターフェース研究会 JavaScriptにBlogの全文検索をやらせてみる&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_インデックスファイルの生成&#34;&gt;インデックスファイルの生成&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;Hugo に全文検索用のインデックスファイルを書き出させるには、ちょっとしたコツが必要です。Hugo のコミュニティサイトから学びました。それは、インデックスファイル &lt;tt&gt;index.js&lt;/tt&gt; を書き出すための特別な Type のテンプレートを作成し、ダミーの投稿と使って書き出すというものです。素晴らしいアイデアです。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;&lt;strong&gt;参考:&lt;/strong&gt; &lt;a href=&#34;https://discuss.gohugo.io/t/live-hugo-site-search-with-lunr-js/2857&#34;&gt;Live Hugo Site search with Lunr.js - tips &amp;amp; tricks - Hugo Discussion&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;これは lunr.js についての投稿ですが、これによって当初の企画が実現できました。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;これから実際にインデックスファイルを Hugo を使って書き出す手順を説明します。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_インデックスファイルのテンプレート&#34;&gt;インデックスファイルのテンプレート&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;このインデックスを書き出す Type を &#34;js&#34; と決め、書き出し用テンプレートを &lt;tt&gt;layouts/js/single.html&lt;/tt&gt; に配置しました。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;title&#34;&gt;single.html&lt;/div&gt;
&lt;div class=&#34;content&#34;&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;Section が Post の投稿に限定して、題名、URL、本文を取り出しています。なお、本文の書き出しには HTML を外すために変数 &lt;tt&gt;.PlainWords&lt;/tt&gt; を使いました。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;&lt;tt&gt;.PlainWords&lt;/tt&gt; の様な Hugo の文書化していないテキストに関する機能と JSON 形式でインデックスファイルを作成する場合のヒントについて &lt;a href=&#34;http://rs.luminousspice.com/hugo-site-search/#appendix&#34;&gt;遺補&lt;/a&gt; にまとめました。&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_インデックスファイルを生成する空の投稿&#34;&gt;インデックスファイルを生成する空の投稿&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;テンプレートで設定した内容を実際に生成するための空の投稿ファイル作ります。Front Matter で　Type を　&#34;js&#34; とし、url を &lt;tt&gt;index.js&lt;/tt&gt; と指定しました。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;title&#34;&gt;indexjs.adoc&lt;/div&gt;
&lt;div class=&#34;content&#34;&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;このサイトでは AsciiDoc で書いているので拡張子を &lt;tt&gt;adoc&lt;/tt&gt; にしましたが &lt;tt&gt;md&lt;/tt&gt; にしても機能します。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;その結果が &lt;a href=&#34;http://rs.luminousspice.com/index.js&#34;&gt;http://rs.luminousspice.com/index.js&lt;/a&gt; になります。容量は 700 KB です。
インデックスファイルが実利用に耐えうるサイズになるか、当初心配しました。
過去 4 年でこのサイズですから、このサイトではこれから　4−5 年は問題なく使えると判断しました。&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_検索ページの作成&#34;&gt;検索ページの作成&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;次に、作成したインデックスファイル &lt;tt&gt;index.js&lt;/tt&gt; を検索するユーザーインタフェイスを作ります。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_検索ページテンプレートの作成&#34;&gt;検索ページテンプレートの作成&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;検索ページ用の Type &#34;search&#34; のテンプレート &lt;tt&gt;layouts/search/single.html&lt;/tt&gt; を作り、その中にオリジナルの最速インターフェース研究会のスクリプトを取り込みました。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;収録コンテンツの検索内容との兼ね合いで、オリジナルで使用している JavaScriptによるローマ字仮名変換ライブラリ &lt;tt&gt;roma.js&lt;/tt&gt; は使いませんでした。&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_検索ページの作成_2&#34;&gt;検索ページの作成&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;検索ページを配置するための投稿を作成します。Front Matter は次のように設定しました。Type を &#34;Search&#34; に指定しています。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;title&#34;&gt;search.adoc (検索ページの Front Matter)&lt;/div&gt;
&lt;div class=&#34;content&#34;&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;&lt;strong&gt;参考:&lt;/strong&gt; &lt;a href=&#34;https://discuss.gohugo.io/t/another-way-to-search/1736&#34;&gt;Another way to search - tips &amp;amp; tricks - Hugo Discussion&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_完成品はこれだ&#34;&gt;完成品はこれだ&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;&lt;a href=&#34;http://rs.luminousspice.com/search/&#34;&gt;全文検索&lt;/a&gt; が完成品です。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;矢印キーとリターンキーでページ送りすることができます。
極めて高速に検索でき、自分が抱いていた検索のユーザー体験を破壊してくれました。
複数キーワードを使った複雑な検索などは検索エンジンを使ってもらうことにしましょう。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;あまりに便利なので、サイト移行の使ったデータ変換作業の検証に実際に使いました。
検索機能を取り付けるまでに必要な作業はここまでです。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_このサイトでの変更点&#34;&gt;このサイトでの変更点&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;オリジナルからの変更点は次の通りです。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
検索結果のページ送りに矢印キーの上下を機能するようにした。
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
レイアウトデザインをテーマに合わせて調整した。
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
サイトの公開形態上、公開日表示を外した。
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
コンテンツの内容から、ローマ字かな変換機能を外した。
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_検索結果の調整&#34;&gt;検索結果の調整&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;初期設定ではインデックスは公開日順に書き出します。つまり検索結果に複数候補がある時は、日付順に表示します。
このサイトのコンテンツは日記やブログではなく、全てのコンテンツを継続的に更新しているので経時的な順序に意味はありません。
そこで、統計情報のアクセス数や検索キーワード元に重み付けしました。アクセス数の九割を占めている収録コンテンツの半数に &lt;tt&gt;.Weight&lt;/tt&gt; を使って三段階に重み付けしました。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;検索結果は重み付け＞日付の順に表示するように変えました。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;&lt;strong&gt;参考:&lt;/strong&gt; Hugo ドキュメント &lt;a href=&#34;https://gohugo.io/templates/list/#ordering-content&#34;&gt;Ordering Content&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_検索対象の絞り込み&#34;&gt;検索対象の絞り込み&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;現在は、全文検索の対象は本文のみになっています。当初は検索対象に、タグや概要も含めていました。実際に完成して使ってみると、全文検索というのは検索キーワードが実際のコンテンツの文脈と一緒に表示されることに意味がある (つまり KWIC なんですが) ことを再確認しました。
そこで、タグや概要については全文検索以外の手段で利用できることから除外しました。&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_hugo_の検索機能の動向についてのまとめ&#34;&gt;Hugo の検索機能の動向についてのまとめ&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;Hugo の検索機能について、一般的に使われている方法について簡単にまとめておきましょう。
今回の事例では極力 JavaScript の追加は制限する方針でしたが、特に制約の状況では、もっと簡単に設置できる方法が見つかります。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_広く使われている方法&#34;&gt;広く使われている方法&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;SSG で広く使われている全文検索機能は &lt;a href=&#34;https://github.com/olivernn/lunr.js&#34;&gt;lunr.js&lt;/a&gt; が有名です。専用のプラグインがある SSG もありますが、Hugo の場合は外部のプログラムによって JSON 形式インデックスファイル生成し、検索するのが一般的なようです。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;日本語化は、 &lt;a href=&#34;https://github.com/MihaiValentin/lunr-languages&#34;&gt;lunr-languages&lt;/a&gt;を使えばできるらしく、 &lt;a href=&#34;http://chasen.org/~taku/software/TinySegmenter/&#34;&gt;TinySegmenter&lt;/a&gt;
 が同梱されていました。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/hugo-lunr&#34;&gt;hugo-lunr&lt;/a&gt; を使うと Hugo 用のインデックスファイルを生成してくれます。&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_hugo_での_lunr_js_利用事例&#34;&gt;Hugo での lunr.js 利用事例&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;lunr.js の事例は Hugo のサポートサイトで見つかります。検索ページの配置の仕方や、インデックスファイルを作り方は、自分の事例でも参考になりました。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://discuss.gohugo.io/t/live-hugo-site-search-with-lunr-js/2857&#34;&gt;Live Hugo Site search with Lunr.js - tips &amp;amp; tricks - Hugo Discussion&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://discuss.gohugo.io/t/another-way-to-search/1736&#34;&gt;Another way to search - tips &amp;amp; tricks - Hugo Discussion&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://gist.github.com/sebz/efddfc8fdcb6b480f567&#34;&gt;hugo + gruntjs + lunrjs = &amp;lt;3 search&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_今後有望な_docsearch_というサービス&#34;&gt;今後有望な DocSearch というサービス&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;この全文検索の作業が一段落して Hugo のリポジトリをアップデートしたところ、Hugo のドキュメントの検索が　Algolia の &lt;a href=&#34;http://community.algolia.com/docsearch/&#34;&gt;DocSearch&lt;/a&gt; というサービスを変更になっていることに気がつきました。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;自分のサイトの URL を登録すると、クローラーがインデックスを作り、スニペッドで UI を提供してくれるようで、日本語もサポート済みとのこと。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;具体的な配置方法は、 &lt;a href=&#34;https://github.com/spf13/hugo/commit/8890885a705699e7541cfd42f150b37c0a7a72a0&#34;&gt;8890885&lt;/a&gt; を見ると分かると思います。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;既に &lt;a href=&#34;https://github.com/algolia/algoliasearch-wordpress&#34;&gt;WordPress&lt;/a&gt; や &lt;a href=&#34;https://blog.algolia.com/instant-search-blog-documentation-jekyll-plugin/&#34;&gt;Jekyll&lt;/a&gt; のプラグインを提供しているようです。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;これまで、自分でやって来た作業を全て肩代わりしてくれるサービスだ。なんてありがたいと思って試しに登録してみたら、このサイトは &#34;documentation site&#34; ではなく、クローラーも完全には正しく処理できないとお断りされました。
代わりに、10,000 Records、100,000 Operations まで無料で使える Hacker プランを勧められました。&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;appendix&#34;&gt;遺補&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;この作業を行っているうちに見つけた関連項目をまとめます。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;hugofunction&#34;&gt;Hugo の文書化されていないテキスト機能&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;Hugo には、未だ文書化されていないテキストに関する変数や組み込み関数があります。参考までに紹介します。
それぞれの使い方や機能については、GitHub などでコミット内容を確認ください。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;&lt;div class=&#34;title&#34;&gt;変数&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
.Plain &lt;a href=&#34;https://github.com/spf13/hugo/commit/be5ace1588e54c2b0081d7c8ad57795b67307cde&#34;&gt;be5ace1&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
.PlainWords &lt;a href=&#34;https://github.com/spf13/hugo/commit/f8704c1bf23d22530ff417e0f48ee487a167a0f7&#34;&gt;f8704c1&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;&lt;div class=&#34;title&#34;&gt;関数 (0.16-DEV から)&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
plainify &lt;a href=&#34;https://github.com/spf13/hugo/commit/e5e1bcc271246fa96ea8ffdb6a8bbc879cf296ce&#34;&gt;e5e1bcc&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
jsonify &lt;a href=&#34;https://github.com/spf13/hugo/commit/435e996c4fd48e9009ffa9f83a19fb55f0777dbd&#34;&gt;435e996&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;indexjson&#34;&gt;JSON 形式でインデックスファイルを作成するには&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;この記事のアプローチと同じ方法で JSON 形式でインデックファイルを作ることも可能です。実際に XMLHttpRequest で読んで同じように検索できることころまで確認しました。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;この場合のポイントは、インデックスファイルを書き出す際に、検索対象の文字列を JSON 形式を満足するようにエスケープすることです。Hugo の新しい組み込み関数 &lt;tt&gt;jsonify&lt;/tt&gt; も用意されているのですが、私の事例では全てのコンテンツに対して満足いく結果を出せませんでした。&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Hugo からインデックスファイルを書き出すには独自の Type を作る。
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
インデックスファイルのサイズがシステム採用の判断に影響を与える。
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
インデックスファイル内の項目順序が検索結果の表示に影響するので調整が必要。
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Hugo の文書化されていない機能はユーザーコミュニティの類似の事例から見つけやすい。
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Hugo の機能拡張をするなら、最新動向を一度調べた方がよい。
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
    </item>
    
    <item>
      <title>iPhone 版 Anki でテキストを読み上げるには</title>
      <link>http://rs.luminousspice.com/speech-text-on-ankimobile/</link>
      <pubDate>Sat, 21 Jun 2014 23:30:03 +0900</pubDate>
      <guid>http://rs.luminousspice.com/speech-text-on-ankimobile/</guid>
      <description>iPhone 版 Anki では、システムのアクセシビリティ機能を利用するとテキストを読み上げることが出来ます。この機能の呼び出し方を紹介します。How to use text-to-speech on iOS (AnkiMobile)</description>
      <content>&lt;div id=&#34;preamble&#34;&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;iPhone 版 Anki では、システムのアクセシビリティ機能を利用するとテキストを読み上げることが出来ます。この機能の呼び出し方を紹介します。&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;&lt;a target=&#34;itunes_store&#34; href=&#34;https://itunes.apple.com/jp/app/ankimobile-flashcards/id373493387?mt=8&amp;amp;uo=4&amp;amp;at=11lGoS&#34;&gt;AnkiMobile&lt;/a&gt; &lt;a href=&#34;https://itunes.apple.com/jp/app/ankimobile-flashcards/id373493387?mt=8&amp;amp;uo=4&amp;amp;at=11lGoS&#34; target=&#34;itunes_store&#34;&gt;&lt;/a&gt; 
とは、Anki のデータを学習するための iOS 機器用の有償アプリケーションです。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;iPhone などの iOS 機器は、システム自体は音声認識や音声合成などの豊富なアクセシビリティ機能を持っています。iOS 版の Anki からアプリの標準設定では直接呼び出すことが出来ませんので、テキストから音声合成する、読み上げる方法を紹介します。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;次の 2 通りの方法を紹介します。テキストを読み上げる用途に適したものをお使いください。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
選択項目を読み上げ機能の利用
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
読み上げ機能を持つカードテンプレートの作成
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;AnkiMobile の最低限な使用方法を理解していることを前提として説明します。
文中にもし不明な項目が出てきたら &lt;a href=&#34;http://rs.luminousspice.com/ankimobile-survival-guide/&#34;&gt;iPhone ユーザーのための AnkiMobile サバイバルガイド&lt;/a&gt;を参考にしてください。&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_選択項目を読み上げ&#34;&gt;選択項目を読み上げ&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;カードの好きな場所を選択して、読み上げる方法を紹介します。読み上げるタイミングも自分で決めることが出来ます。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;選択項目を読み上げ (Speak Selection) は、iPhoneの設定項目を一か所変更するだけですぐ利用できるようになります。
呼び出す手順は、一見複雑そうに思うかもしれませんが、使ってみると意外に簡単です。
自分ではこちらの方法を通常使っています。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_設定の手順&#34;&gt;設定の手順&lt;/h3&gt;
&lt;div class=&#34;olist arabic&#34;&gt;&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;
[設定]-[一般]-[アクセシビリティ]-[選択項目の読み上げ]
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
[選択項目の読み上げ] 項目を [オン] (1) にします。
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;http://rs.luminousspice.com/images/setting-selectionspeech.png&#34; alt=&#34;setting-selectionspeech.png&#34; width=&#34;300&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;title&#34;&gt;図 1. 選択項目を読み上げ設定&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_設定の調整&#34;&gt;設定の調整&lt;/h3&gt;
&lt;div class=&#34;ulist&#34;&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
[声] (2) の項目をタップして表示する設定する言語選択できます。
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
[読み上げ速度] (3) のスライダーで設定を変更すると、読み上げ速度のプレビューを聴くことが出来ます。
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_音声の詳細設定&#34;&gt;音声の詳細設定&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;[声] (2) で表示した言語の一覧から、言語をタップして指定すると言語別に音声の種類(a)、品質(b)、読み上げ速度(c) を設定できます。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;http://rs.luminousspice.com/images/setting-voice.png&#34; alt=&#34;setting-voice.png&#34; width=&#34;300&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;title&#34;&gt;図 2. 声の詳細設定&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_iphoneで読み上げ可能な言語&#34;&gt;iPhoneで読み上げ可能な言語&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;なお、音声は次の 26 言語に対応しています。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;日本語、アラビア語、イタリア語、インドネシア語、オランダ語、ギリシャ語、スウェーデン語、スペイン語、スロバキア語、タイ語、チェコ語、デンマーク語、ドイツ語、トルコ語、ノルウェー語[ブークモール]、ハンガリー語、ヒンディー語、フィンランド語、フランス語、ポーランド語、ポルトガル語、ルーマニア語、ロシア語、英語、韓国語、中国語&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_テキストを読み上げる方法&#34;&gt;テキストを読み上げる方法&lt;/h3&gt;
&lt;div class=&#34;olist arabic&#34;&gt;&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;
読み上げたいテキストをダブルタップして、選択項目を指定します。
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
[Speak]をタップします。
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;http://rs.luminousspice.com/images/speak-selection.png&#34; alt=&#34;speak-selection.png&#34; width=&#34;300&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;title&#34;&gt;図 3. 選択範囲を指定して読み上げる&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_ノートを読み上げるカードテンプレートの作り方&#34;&gt;ノートを読み上げるカードテンプレートの作り方&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;AnkiMobile でカードを表示した時に自動的にテキストを読み上げる方法を紹介しましょう。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;Anki の作者は Anki のサポートサイトの記事 &lt;a target=&#34;_new&#34; href=&#34;https://anki.tenderapp.com/discussions/ankimobile/890-req-text-to-speech-in-ankimobile-for-ios7&#34;&gt;Req: Text to speech in AnkiMobile for ios7..&lt;/a&gt; の中でノートを読み上げるカードテンプレートの作り方を紹介しています。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;この方法は、テキスト読み上げ機能を呼び出す JavaScript をカードテンプレートに導入する方法です。テキストの読み上げには &lt;a target=&#34;_new&#34; href=&#34;https://dvcs.w3.org/hg/speech-api/raw-file/tip/speechapi.html&#34;&gt;Web Speech API&lt;/a&gt; という Web 標準を使います。
なお、AnkiMobile ではカートテンプレートの編集できませんので、PC 版 Anki で編集します。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;&lt;strong&gt;注意:&lt;/strong&gt; AnkiMobile 2.0.18 にアップデート後、マナーモード (サイレントスイッチ) 設定中はこの機能は動作せず、エラーが発生します。マナーモードを切ってお使いください。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;カードの表面に配置した &lt;span class=&#34;monospaced&#34;&gt;Front&lt;/span&gt; フィールドを読み上げるには、表面のテンプレートを次のように設定します。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Front フィールドを読み上げる設定例&lt;/div&gt;
&lt;div class=&#34;content&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;word&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;{{Front}}&lt;span class=&#34;nt&#34;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;word&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setTimeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;speak(w.innerHTML)&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;500&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;speak&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;word&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;speech&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;SpeechSynthesisUtterance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;speech&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;word&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;speech&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;volume&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 音量: 0 to 1 (1)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;speech&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;rate&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 速度: 0.1 to 9 (2)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;speech&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pitch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// ピッチ: 0 to 2, 1=normal (3)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;speech&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;lang&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;en-US&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 言語: アメリカ英語、日本語なら ja-JP (4)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;speechSynthesis&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cancel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;speechSynthesis&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;speak&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;speech&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;音声の読み上げ速度(1)、音量(2)、ピッチ(3)、言語(4)を指定することが出来ます。
カードテンプレートの編集方法については、&lt;a href=&#34;http://rs.luminousspice.com/how-to-edit-cards/&#34;&gt;Ankiのカード表示を編集する&lt;/a&gt;で説明しています。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_anki_と_ankimobile_を同期している場合&#34;&gt;Anki と AnkiMobile を同期している場合&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;読み込み機能を使いたいカードのカードテンプレートに上の設定を追加し、AnkiMobile と同期します。&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_ankimobile_単独で利用している場合&#34;&gt;AnkiMobile 単独で利用している場合&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;新規のノートのみに読み上げ機能を設定できます。
このカードテンプレートを含んだ共有単語帳を使います。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;
共有単語帳 &lt;a target=&#34;_new&#34; href=&#34;https://ankiweb.net/shared/info/810249417&#34;&gt;Speech Text template for iOS (AnkiMobile)&lt;/a&gt;を ダウンロードします。
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
ダウンロードファイルを AnkiMobile で開くと、読み込み機能を持つノートタイプ (Note Type) を導入できます。
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
ノート追加画面の [Type] 項目でノートタイプ指定します。アメリカ英語を読み上げる場合は [Basic (iOS Speech en-US;アメリカ英語)]へ変更します。
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;http://rs.luminousspice.com/images/add-note.png&#34; alt=&#34;add-note.png&#34; width=&#34;300&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;title&#34;&gt;図 4. ノート追加画面&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;共有単語帳のインストール手順やノートの追加方法は &lt;a href=&#34;http://rs.luminousspice.com/ankimobile-survival-guide/&#34;&gt;iPhone ユーザーのための AnkiMobile サバイバルガイド&lt;/a&gt;をご覧下さい。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;音声データをカードに使いたい方は、&lt;a href=&#34;http://rs.luminousspice.com/bulk-import-media-files-into-anki/&#34;&gt;画像、音声、動画などメディアファイルを Anki へ一括登録&lt;/a&gt;を参考にしてください。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_おわりに&#34;&gt;おわりに&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;iPhone のシステム iOS 自体は音声に関する豊富な機能を持っています。AnkiMobile から呼び出す方法さえ理解すれば、Anki の学習を妨げることなく簡単に呼び出すことが出来るようになります。
テキストの読み上げ機能をどのように使うか、その用途によって紹介した 2 つの方法を使い分けて頂ければと思います。&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_更新情報&#34;&gt;更新情報&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;&lt;p&gt;2014/06/21: 初出&lt;br&gt;2015/11/20: 共有単語帳リンク先変更&lt;br&gt;2016/03/17: AnkiMobile 2.0.18 アップデートによる問題点を追加&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
    </item>
    
  </channel>
</rss>
