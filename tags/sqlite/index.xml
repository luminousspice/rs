<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sqlite on the Right Stuff</title>
    <link>http://rs.luminousspice.com/tags/sqlite/</link>
    <description>Sqlite | the Right Stuff</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 06 Jul 2013 21:00:07 +0900</lastBuildDate>
    <atom:link href="https://pubsubhubbub.superfeedr.com" rel="hub"/>
    <atom:link href="https://pubsubhubbub.appspot.com/" rel="hub"/>
    <atom:link href="/tags/sqlite/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>破損したAnkiデータの修復</title>
      <link>http://rs.luminousspice.com/restore_corrupt_data/</link>
      <pubDate>Sat, 06 Jul 2013 21:00:07 +0900</pubDate>
      <guid>http://rs.luminousspice.com/restore_corrupt_data/</guid>
      <description>Ankiデータが、何らかの原因で不幸にして破損した場合の修復方法について紹介します。</description>
      <content>&lt;section id=&#34;preamble&#34;&gt;
&lt;p&gt;Ankiデータが、何らかの原因で不幸にして破損した場合の修復方法について紹介します。起動後に大量のデータ更新を行ったりして、自動バックアップからの復元では対応できない場合の手順を説明します。&lt;/p&gt;
&lt;p&gt;注意: この作業はデスクトップPC上でのみ作業が可能です。また、コマンドラインツールの操作が必要となります。なお、モバイル機器での作業は対象外です。&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&#34;コレクションデータの破損と確認&#34;&gt;
  &lt;div class=&#34;page-header&#34;&gt;
    &lt;h2&gt;コレクションデータの破損と確認&lt;/h2&gt;
  &lt;/div&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;メニューバーから[ツール]&amp;gt;[データベースをチェック]を実行すると、データが破損していないか確認できます。&lt;/p&gt;
&lt;p&gt;データの破損が発生した場合、一番簡単な復旧方法は最新の&lt;a href=&#34;http://rs.luminousspice.com/anki_automatic_backup/&#34;&gt;自動バックアップファイルから復旧する&lt;/a&gt;ことです。&lt;/p&gt;
&lt;p&gt;Ankiは、アプリケーション終了時、ユーザープロファイル変更時に自動バックアップを行います。まずは、自動バックアップファイルの復元を試みて、問題発生の直前の状況と比較してみましょう。&lt;/p&gt;
&lt;p&gt;この記事で紹介するデータ修復の手順は、最新の自動バックアップ以降に、大量のデータの読み込みを行った場合など、最新のデータと自動バックアップファイルの間に差が大きい場合に有効です。&lt;/p&gt;
&lt;p&gt;Ankiは、プロファイル毎にコレクションファイルを作成します。データの破損が発生しているのはどのプロファイルか改めて確認してください。&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&#34;修復作業の準備&#34;&gt;
  &lt;div class=&#34;page-header&#34;&gt;
    &lt;h2&gt;修復作業の準備&lt;/h2&gt;
  &lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
プロファイルフォルダーの中にある &lt;code&gt;collection.anki2&lt;/code&gt; のバックアップを取ってください。
このファイルが、修復対象のファイルです。
なお、プロファイルフォルダーは、Ankiフォルダーの中に、プロファイル名を使って作成しています。
&lt;/li&gt;
&lt;li&gt;
つぎに &lt;code&gt;sqlite3&lt;/code&gt; がインストール済みか確認してください。
&lt;div class=&#34;ulist&#34;&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Mac OS Xの場合は、既定でインストール済みです。
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Linuxの場合は、パッケージ管理システムを使ってインストール済みか確かめることができます。
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Windowsの場合は、&lt;a href=&#34;http://www.sqlite.org/download.html&#34; target=&#34;_new&#34;&gt;SQLite サイト&lt;/a&gt;からWindows用の最新のコマンドラインシェル(command-line shell)をダウンロードします。
2013/10/16時点で、最新版は&lt;a href=&#34;http://www.sqlite.org/2013/sqlite-shell-win32-x86-3080002.zip&#34;&gt;sqlite-shell-win32-x86-3080002.zip&lt;/a&gt;です。なお、Ankiユーザーマニュアルでは、&lt;a href=&#34;http://www.sqlite.org/sqlite-3_6_23.zip&#34;&gt;sqlite-3_6_23.zip&lt;/a&gt;を指定しています。
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;section id=&#34;コレクションファイルのダンプ&#34;&gt;
  &lt;div class=&#34;page-header&#34;&gt;
    &lt;h2&gt;コレクションファイルのダンプ&lt;/h2&gt;
  &lt;/div&gt;
&lt;p&gt;SQLite3のコマンドラインシェルを使って、コレクションのダンプファイルを作ります。作業に使用するプラットフォームによって手順が異なりますのでご注意ください。&lt;/p&gt;
&lt;h3 id=&#34;mac_os_x_または_linuxの場合&#34;&gt;Mac OS X または Linuxの場合&lt;/h3&gt;
&lt;p&gt;ターミナルを開き、Ankiフォルダーの中のプロファイルフォルダーに移動して次のコマンドを実行します。&lt;/p&gt;
&lt;pre&gt;sqlite3 collection.anki2 .dump &amp;gt; dump.txt&lt;/pre&gt;
&lt;p&gt;生成したファイル &lt;code&gt;dump.txt&lt;/code&gt; をテキストエディタで開きます。
最終行に &#34;rollback;&#34; という記述があれば、&#34;commit;&#34; に変更します。&lt;/p&gt;
&lt;p&gt;さらに、ターミナルで次のコマンドを実行します。&lt;/p&gt;
&lt;pre&gt;cat dump.txt | sqlite3 temp.file&lt;/pre&gt;
&lt;p&gt;注意: コレクションファイルを上書きせず、必ず &lt;code&gt;temp.file&lt;/code&gt; とテンポラリーファイルを指定してください。&lt;/p&gt;
&lt;h3 id=&#34;windowsの場合&#34;&gt;Windowsの場合&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
ダウンロードしたSqliteファイルを解凍すると、&lt;code&gt;sqlite3.exe&lt;/code&gt; が生成します。これをAnkiフォルダーの中のプロファイルフォルダーにコピーします。
&lt;/li&gt;
&lt;li&gt;
コマンドプロンプトを起動して次のコマンドを実行します。
コマンドプロンプトを開くには、[スタート]ボタンを押し、[プログラムとファイルの検索]フィールドに &lt;code&gt;cmd&lt;/code&gt; と入力して、&lt;code&gt;cmd.exe&lt;/code&gt; を実行します。
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;sqlite3 collection.anki2 .dump &amp;gt; dump.txt&lt;/pre&gt;
&lt;p&gt;生成したファイル &lt;code&gt;dump.txt&lt;/code&gt; をテキストエディタで開きます。
最終行に &#34;rollback;&#34; という記述があれば、&#34;commit;&#34; に変更します。&lt;/p&gt;
&lt;p&gt;さらに、ターミナルで次のコマンドを実行します。&lt;/p&gt;
&lt;pre&gt;cat dump.txt | sqlite3 temp.file&lt;/pre&gt;
&lt;p&gt;注意: コレクションファイルを上書きせず、必ず &lt;code&gt;temp.file&lt;/code&gt; とテンポラリーファイルを指定してください。&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&#34;ankiに読み込む&#34;&gt;
  &lt;div class=&#34;page-header&#34;&gt;
    &lt;h2&gt;Ankiに読み込む&lt;/h2&gt;
  &lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
ダンプファイル作成時にエラーメッセージを表示しないこと、ダンプファイルが空でないことを確認します。
&lt;/li&gt;
&lt;li&gt;
コレクションファイル &lt;code&gt;collection.anki2&lt;/code&gt; を別の名前に変更し、ダンプファイル &lt;code&gt;temp.file&lt;/code&gt; を &lt;code&gt;collection.anki2&lt;/code&gt; に変更します。
&lt;/li&gt;
&lt;li&gt;
Ankiを起動し、ツールバーから[ツール]&amp;gt;[データベースをチェック]を実行します。
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;問題がなければ修復作業は成功です。&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&#34;更新情報&#34;&gt;
  &lt;div class=&#34;page-header&#34;&gt;
    &lt;h2&gt;更新情報&lt;/h2&gt;
  &lt;/div&gt;
&lt;p&gt;2013/10/16: Anki 2.0.14のリリースと同時に行われた&lt;a href=&#34;http://ankisrs.net/docs/manual.html#corrupt-collections&#34; target=&#34;_new&#34;&gt;マニュアル&lt;/a&gt;の変更に基づいて、内容を更新しました。&lt;/p&gt;
&lt;p&gt;2013/7/6: 初出&lt;/p&gt;
&lt;/section&gt;
</content>
    </item>
    
    <item>
      <title>Anki 2.x アドオンの作成 日本語訳</title>
      <link>http://rs.luminousspice.com/anki2addons/</link>
      <pubDate>Sun, 16 Sep 2012 00:00:47 +0900</pubDate>
      <guid>http://rs.luminousspice.com/anki2addons/</guid>
      <description>Writing Anki 2.x Add-ons  の日本語訳。簡単なサンプルを使ったアドオン作成の概要、データベースアクセスの方法、フックを使った既存コードのカスタマイズ、デバッグ、次期バージョン 2.1 の対応アドオンの作り方、アドオンの共有方法について説明しています。</description>
      <content>&lt;div id=&#34;preamble&#34;&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Writing Anki 2.x Add-ons  の日本語訳。簡単なサンプルを使ったアドオン作成の概要、データベースアクセスの方法、フックを使った既存コードのカスタマイズ、デバッグ、次期バージョン 2.1 の対応アドオンの作り方、アドオンの共有方法について説明しています。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_日本語版をご覧いただく前に&#34;&gt;日本語版をご覧いただく前に&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;この文書は、&lt;a href=&#34;http://ankisrs.net/docs/addons.html&#34;&gt;Writing Anki 2.x Add-ons&lt;/a&gt; 2017-08-15 版の日本語訳です。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Anki 2.x は 2017 年 8 月 15 日現在、最新バージョンは 2.0.46 および 2.1 Beta 11 です。より最新で正確な情報をご覧になりたい方は、原本をご覧ください。&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_anki_2_x_アドオンの作成&#34;&gt;Anki 2.x アドオンの作成&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_原文および翻訳&#34;&gt;原文および翻訳&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;英語: &lt;a href=&#34;http://ankisrs.net/docs/addons.html&#34; class=&#34;bare&#34;&gt;http://ankisrs.net/docs/addons.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ロシア語: &lt;a href=&#34;http://finpapa.ucoz.ru/ankitest-addons.html&#34; class=&#34;bare&#34;&gt;http://finpapa.ucoz.ru/ankitest-addons.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_概要&#34;&gt;概要&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Anki は、ユーザーフレンドリーなプログラミング言語 Python で作成しています。
Python についてあまり詳しくない方は、この文書の先を読む前に
&lt;a href=&#34;http://docs.python.org/tutorial/&#34;&gt;Python tutorial&lt;/a&gt; をお読みください。
(訳注: &lt;a href=&#34;https://docs.python.org/ja/3/tutorial/&#34;&gt;Python チュートリアル
日本語版&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Python は動的言語なため、Anki ではアドオンが極めて強力に機能します。アドオンは Anki の処理
を拡張するだけでなく、Anki の任意の側面に変更を加えることができます。例えば、スケジュール
設定の処理を変更したり、ユーザーインターフェイスを修正したりすることができます。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;プラグインの開発には、特別な開発環境は必要ありません。テキストエディタがあれば十分です。
Windows や Mac をお使いの方は、このサイトで提供しているパッケージ版の Anki をお使いください。これらの
プラットフォーム上でゼロから Anki を構築するための説明が入手できないためです。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;メモ帳のような単純なテキストエディタでプラグインを作成できますが、シンタックスハイライト
機能 (コードの色分け) を持ったエディタを探してみると、作業がより簡単になります。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Anki を構成する2つの要素&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&#39;anki&#39; には、「背後」で動作する全てのコードが含まれています。コレクションを開いたり、
カードを取得し、回答する処理などです。これは、Anki の GUI が使用していますが、GUI を使わず
に Anki 単語帳にアクセスするコマンドラインプログラムに含めることもできます。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&#39;aqt&#39; には、Anki のユーザーインターフェイスの部分が含まれています。Anki のユーザー
インターフェイスは、PyQt 上に構築されています。PyQt とは、クロスプラットフォーム GUI
ツールキット Qt に対する Python バインディングです。PyQt は、Qt の API に密接に動作
します。Qt documentation は、特定の GUI
コンポーネントの使い方を調べたい時に、非常に役立ちます。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Anki 2.0.x は、&lt;a href=&#34;http://doc.qt.io/qt-4.8/index.html&#34;&gt;Qt 4.8&lt;/a&gt; を使っています。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Anki 2.1.x は、&lt;a href=&#34;http://doc.qt.io/qt-5/index.html&#34;&gt;Qt 5.9&lt;/a&gt; を使っています。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Anki が起動すると、Anki は、Documents/Anki/addons フォルダの中にある .py ファイルを
探し、見つけたら一つずつ実行します。アドオンが実行されると、通常は既存のコードを修正したり、
新しい機能を提供する新しいメニュー項目を増やしたりします。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_簡単なアドオンの一例&#34;&gt;簡単なアドオンの一例&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;次に示す test.py ファイルを、自分のアドオンフォルダーに追加してみてください:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;# aqt からメインウィンドウオブジェクト (mw) を読み込みます
from aqt import mw
# utils.py から &#34;show info&#34; ツールを読み込みます
from aqt.utils import showInfo
# Qt GUI ライブラリの全てを読み込みます
from aqt.qt import *

# 次のようなメニュー項目を追加してみましょう。まず最初にメニュー項目が利用可能になったら
# 呼び出す関数を作成します。

def testFunction():
    # 現在使用中のコレクションの中のカードの枚数を取得します
    # このコレクションはメインウィンドウの中に保存しています
    cardCount = mw.col.cardCount()
    # メッセージボックスを表示します
    showInfo(&#34;Card count: %d&#34; % cardCount)

# 新しいメニュー項目 &#34;test&#34; を作成します。
action = QAction(&#34;test&#34;, mw)
# この項目をクリックしたら testFunction を呼び出すように設定します。
action.triggered.connect(testFunction)
# そして、この設定をツールメニューに反映します。
mw.form.menuTools.addAction(action)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Anki を再起動すると、ツールメニューの中に &#39;test&#39; 項目が追加されていることに気づくでしょう。
この項目を選択して実行するとカード枚数を表示するダイアログが現れます。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;プラグインの入力中に間違いがあった場合には、Anki は起動時にエラーメッセージを表示して
どこに問題があるか指摘します。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_コレクション&#34;&gt;コレクション&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;コレクションファイル上の全ての操作は、mw.col を通じてアクセスします。基本的な例で
何ができるがご紹介します。注意してほしいのは、上の例のように testFunction() の中で行ってください。
アドオンの中で直接実行することはできません。それは、Anki を起動中にアドオンが初期化し、その後にコレクションやプロファイルを
読み込むからです。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;strong&gt;復習時期のカードの取得:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;card = mw.col.sched.getCard()
if not card:
    # 現在の単語帳は復習済み&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;strong&gt;カードを解答する:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;mw.col.sched.answerCard(card, ease)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;strong&gt;ノートを編集する (各フィールドの最後に &#34; new&#34; を追加):&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;note = card.note()
for (name, value) in note.items():
    note[name] = value + &#34; new&#34;
note.flush()&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;strong&gt;ノートにタグ x を持つカードの ID を取得する:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;ids = mw.col.findCards(&#34;tag:x&#34;)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;strong&gt;指定したカード ID から質問と解答を取得する:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;for id in ids:
    card = mw.col.getCard(id)
    question = card.q()
    answer = card.a()&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;strong&gt;データベースの変更後にスケジュールをリセットする。GUI も更新しなければならないので、
メインウィンドウ上で reset() を呼び出すことに注意してください:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;mw.reset()&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;strong&gt;テキストファイルをコレクションに読み込む&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;from anki.importing import TextImporter
file = u&#34;/path/to/text.txt&#34;
# 単語帳を選択
did = mw.col.decks.id(&#34;ImportDeck&#34;)
mw.col.decks.select(did)
# 単語帳にノートタイプを設定
m = mw.col.models.byName(&#34;Basic&#34;)
deck = mw.col.decks.get(did)
deck[&#39;mid&#39;] = m[&#39;id&#39;]
mw.col.decks.save(deck)
# コレクションに読み込む
ti = TextImporter(mw.col, file)
ti.initMapping()
ti.run()&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;ほとんど全ての GUI 処理は &#39;anki&#39; 内に関連する関数を持っています。このため、Anki が利用
できるどんな処理でも、アドオンの中で同様に呼び出すことができます。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;GUI の外側のコレクションにアクセスする場合は、次のようなコードを使います:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;from anki import Collection
col = Collection(&#34;/path/to/collection.anki2&#34;)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Anki の外部のコレクションに何らかの修正を加えたときは、修正が済んだら col.close() を必ず呼び出さなければなりません。
これを怠ると修正点は失われます。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_データベース&#34;&gt;データベース&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&#39;anki&#39; がサポートしていない処理を実行する必要がある場合は、データベースに直接アクセスする
ことができます。Anki コレクションは、SQLite ファイル内に保存されています。詳しい情報は、
&lt;a href=&#34;http://www.sqlite.org/lang.html&#34;&gt;SQLite documentation&lt;/a&gt;をご覧ください。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Anki のデータベースオブジェクトは次のような関数をサポートしています:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;strong&gt;execute() は、挿入と更新処理を実行します。指定した引数は ? を一緒に使います。例えば:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;mw.col.db.execute(&#34;update cards set ivl = ? where id = ?&#34;, newIvl, cardId)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;strong&gt;executemany() は、更新と挿入を一括処理します。大規模な更新にはこの関数の方が、
execute() で個別にデータを処理するよりも非常に高速に処理します。例えば:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;data = [[newIvl1, cardId1], [newIvl2, cardId2]]
mw.col.db.executemany(same_sql_as_above, data)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;strong&gt;scalar() は、単一の項目を返します:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;showInfo(&#34;card count: %d&#34; % mw.col.db.scalar(&#34;select count() from cards&#34;))&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;strong&gt;list() は、各行の最初の列をリストで返します。次のコードの戻り値は [1, 2, 3]です:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;ids = mw.col.db.list(&#34;select id from cards limit 3&#34;)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;strong&gt;all() は、各行がリストの場合、行のリストを返します:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;ids_and_ivl = mw.col.db.all(&#34;select id, ivl from cards&#34;)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;strong&gt;execute() は、中間リストを作らずに結果の集合への処理を繰り返すのに使えます。例:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;for id, ivl in mw.col.db.execute(&#34;select id, ivl from cards limit 3&#34;):
    showInfo(&#34;card id %d has ivl %d&#34; % (id, ivl))&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;アドオンが、コレクションの中のテーブルを修正することが決してないように注意してください。
このことは、Anki 将来のバージョンで変更になる場合があります。プラグイン専用のデータを保存する
必要がある時には、衝突を避けて新しいテーブルを作るか、別のファイルにデータを保存するようにして
ください。小さい設定項目は、mw.col.conf の中に保存できますが、同期の度にコピーするため、
大規模なデータを保存しないでください。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_フック&#34;&gt;フック&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;フックをコードのわずかな箇所に追加して、アドオンの作成がもっと簡単になるようにしました。
フックは 2 種類あります。&#39;hooks&#39; は引数を取り、戻り値はありませんが、&#39;filters&#39; 引数を取り、
(おそらく何らかの修正を加えて) 値を返します。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&#39;hook&#39; の簡単な例は、無駄なカード (leech) の処理の中に見つかります。スケジューラー
(anki/sched.py) が、無駄なカードを見つけると、&#39;hook&#39; を呼び出します。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;runHook(&#34;leech&#34;, card)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;無駄なカードが現れた時に、特定の処理を行いたい場合、例えばそのカードを &#34;Difficult&#34;
という名前の単語帳に移動する場合、次のようなコードで実現できます。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;from anki.hooks import addHook
from aqt import mw

def onLeech(card):
    # スケジューラーが修正する際には、 .flush() を使わずに修正できます。
    card.did = mw.col.decks.id(&#34;Difficult&#34;)
    # カードがフィルター単語帳の中にある場合は、復習時期を元に戻して取得元の単語帳に
    # 戻さなければなりません
    card.odid = 0
    if card.odue:
        card.due = card.odue
        card.odue = 0

addHook(&#34;leech&#34;, onLeech)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;aqt/editor.py の中に &#39;filter&#39; の例があります。エディターは、入力欄からフォーカスが外れる
と &#34;editFocusLost&#34; filter を呼び出します。そして、アドオンはノートに変更を加えます。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;if runFilter(
    &#34;editFocusLost&#34;, False, self.note, self.currentField):
    # ノートを更新して、スケジュールを再度読み込む
    def onUpdate():
        self.loadNote()
        self.checkValid()
    self.mw.progress.timer(100, onUpdate, False)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;このサンプルでは、それぞれの filter は 3 つの引数を受け取ります。修正フラグ、ノート、現在のフィールドです。
filter が変更を加えない場合は、修正フラグは受け取った値と同じ値を返します。
変更を加えた場合は、True を返します。このようにして、どんなアドオンでも変更を加えると
ユーザーインターフェイスは、ノートを読み込み直して、更新内容を表示します。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Japanese Support アドオンは、このフックを使って別のフィールドからフィールドを自動的に生成します。
単純化したものを次に示します。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;def onFocusLost(flag, n, fidx):
    from aqt import mw
    # japanese model か?
    if &#34;japanese&#34; not in n.model()[&#39;name&#39;].lower():
        return flag
    # src フィールドと dst フィールドがあるか?
    for c, name in enumerate(mw.col.models.fieldNames(n.model())):
        for f in srcFields:
            if name == f:
                src = f
                srcIdx = c
        for f in dstFields:
            if name == f:
                dst = f
    if not src or not dst:
        return flag
    # dst フィールドは入力済みか?
    if n[dst]:
        return flag
    # イベントは src フィールドで発生したか?
    if fidx != srcIdx:
        return flag
    # ソーステキストを取得
    srcTxt = mw.col.media.strip(n[src])
    if not srcTxt:
        return flag
    # 欄を更新
    try:
        n[dst] = mecab.reading(srcTxt)
    except Exception, e:
        mecab = None
        raise
    return True

addHook(&#39;editFocusLost&#39;, onFocusLost)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;filter の第一引数は、必ず返される引数です。このフォーカスを失った時の filter の中では、
引数はフラグですが、別のオブジェクトになる場合もあります。例えば、anki/collection.py
の中では、_renderQA() は、カードの表面と裏面用に生成した HTML を収容する &#34;mungeQA&#34; filter
を呼び出します。latex.py は、この filter を LaTeX タグの中のテキストを画像に変換する
のに使っています。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Anki 2.1 では、エディタにボタンを追加するフックを追加しました。次のように使います。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;from aqt.utils import showInfo
from anki.hooks import addHook

# cross out the currently selected text
def onStrike(editor):
    editor.web.eval(&#34;wrap(&#39;&amp;lt;del&amp;gt;&#39;, &#39;&amp;lt;/del&amp;gt;&#39;);&#34;)

def addMyButton(buttons, editor):
    editor._links[&#39;strike&#39;] = onStrike
    return buttons + [editor._addButton(
        &#34;iconname&#34;, # &#34;/full/path/to/icon.png&#34;,
        &#34;strike&#34;, # link name
        &#34;tooltip&#34;)]

addHook(&#34;setupEditorButtons&#34;, addMyButton)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_モンキーパッチとメソッドの隠蔽&#34;&gt;モンキーパッチとメソッドの隠蔽&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;フックを持っていない関数を修正したい場合には、カスタム版の関数で上書きすることが可能です。
このことを、「モンキーパッチ」を呼ぶことがあります&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;aqt/editor.py には、setupButtons() という関数があり、エディターの中にある太字ボタン、
斜字体ボタンのようなボタンを生成します。自分のアドオンに違ったボタンを追加することを考えて
みましょう。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;一番簡単な方法は、Anki のソースコードからその関数をコピーペーストして、自分のテキストを
ボタンに追加します。そして、元の関数を上書きします。次の通りです。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;from aqt.editor import Editor

def mySetupButtons(self):
    &amp;lt;オリジナルからコピーペーストしたコード&amp;gt;
    &amp;lt;カスタムアドオンのコード&amp;gt;

Editor.setupButtons = mySetupButtons&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;この方法は、将来の Anki のバージョンで元のコードが更新されるような場合に、自分のアドオンも
更新する必要になる問題をはらんでいます。もっと良い方法は、オリジナルの関数を保存しておいて
自分のカスタムバージョンの中で呼び出すことです。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;from aqt.editor import Editor

def mySetupButtons(self):
    origSetupButtons(self)
    &amp;lt;カスタムアドオンのコード&amp;gt;

origSetupButtons = Editor.setupButtons
Editor.setupButtons = mySetupButtons&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;これはよく行われる処理なので、Anki では wrap() という関数を提供して、もう少し使いやすく
しています。実際の例をご紹介します。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;from anki.hooks import wrap
from aqt.editor import Editor
from aqt.utils import showInfo

def buttonPressed(self):
    showInfo(&#34;pressed &#34; + `self`)

def mySetupButtons(self):
    # - size=False は、小さいボタンは使わない
    # - lambda は、予め設定されているメソッドの代わりに関数の中で
    #    エディタインスタンスをコールバックに渡す時に必要
    self._addButton(&#34;mybutton&#34;, lambda s=self: buttonPressed(self),
                    text=&#34;PressMe&#34;, size=False)

Editor.setupButtons = wrap(Editor.setupButtons, mySetupButtons)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;既定では、wrap() は元のコードの後にカスタムコードを実行します。第3引数 &#34;before&#34; を渡すと
これを逆転できます。元のバージョンの前と後の両方で実行する必要がある場合は、次のようにします。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;from anki.hooks import wrap
from aqt.editor import Editor

def mySetupButtons(self, _old):
    &amp;lt;オリジナルの前で実行するコード&amp;gt;
    ret = _old(self)
    &amp;lt;オリジナルの後で実行するコード&amp;gt;
    return ret

Editor.setupButtons = wrap(Editor.setupButtons, mySetupButtons, &#34;around&#34;)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;関数の前後でコードを実行するのではなく、関数の中を修正する必要がある場合には、元のコードの
中の対象とする関数にフックを追加するのが良い方法かも知れません。このような場合には、
追加するフックについての質問をフォーラムに投稿してください。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_qt&#34;&gt;Qt&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;概要で話したとおり、Qt documentation は 色々な GUI ウィジェットを表示する方法を学ぶのに非常に貴重な文書です。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;一つ覚えておいてほしいことは、Python ではオブジェクトはガベージコレクションされます。
次のように記述するとどうなるでしょうか。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;def myfunc():
    widget = QWidget()
    widget.show()&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;すると、この関数を終了するとすぐにウェジットは消えてしまいます。これを避けるには、
トップレベルのウェジットに既存のオブジェクトを割り当てます。次の通りです。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;def myfunc():
    mw.myWidget = widget = QWidget()
    widget.show()&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Qt オブジェクトを作って、既存のオブジェクトを親とするときには、このことはあまり必要としません。それは、親オブジェクトが新規オブジェクトを参照し続けるからです。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_標準モジュール&#34;&gt;標準モジュール&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Anki は、このプログラムの実行に必要な標準モジュールだけを含めて提供しています。Python
の完全な複製を含んではいません。このために、Anki が含んでいない標準モジュールを使う必要が
ある場合には、自分のアドオンに同梱する必要があります。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_デバッグ&#34;&gt;デバッグ&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;自分のコードから例外が発生した時には、Anki の標準例外ハンドラー (標準エラー出力に書き出さ
れるものは何でも) が補足します。デバッグ目的のために、情報を出力する必要がある場合は、
aqt.utils.showInfo を使うか、sys.stderr.write(&#34;text\n&#34;) で標準エラー出力に書き出す
必要があります。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Anki には、REPL が含まれています。プログラムの中から &lt;a href=&#34;https://apps.ankiweb.net/docs/manual.html#debug-console&#34;&gt;shortcut key&lt;/a&gt; を押すと
ウィンドウが立ち上がります。上の欄に式や文を入力し、ctrl+return/command+return を押すと
評価します。セッション例を次に挙げます。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; mw
&amp;lt;no output&amp;gt;

&amp;gt;&amp;gt;&amp;gt; print mw
&amp;lt;aqt.main.AnkiQt object at 0x10c0ddc20&amp;gt;

&amp;gt;&amp;gt;&amp;gt; invalidName
Traceback (most recent call last):
  File &#34;/Users/dae/Lib/anki/qt/aqt/main.py&#34;, line 933, in onDebugRet
    exec text
  File &#34;&amp;lt;string&amp;gt;&#34;, line 1, in &amp;lt;module&amp;gt;
NameError: name &#39;invalidName&#39; is not defined

&amp;gt;&amp;gt;&amp;gt; a = [a for a in dir(mw.form) if a.startswith(&#34;action&#34;)]
... print(a)
... print()
... pp(a)
[&#39;actionAbout&#39;, &#39;actionCheckMediaDatabase&#39;, ...]

[&#39;actionAbout&#39;,
 &#39;actionCheckMediaDatabase&#39;,
 &#39;actionDocumentation&#39;,
 &#39;actionDonate&#39;,
 ...]

&amp;gt;&amp;gt;&amp;gt; pp(mw.reviewer.card)
&amp;lt;anki.cards.Card object at 0x112181150&amp;gt;

&amp;gt;&amp;gt;&amp;gt; pp(card()) # mw.reviewer.card.__dict__ へのショートカット
{&#39;_note&#39;: &amp;lt;anki.notes.Note object at 0x11221da90&amp;gt;,
 &#39;_qa&#39;: [...]
 &#39;col&#39;: &amp;lt;anki.collection._Collection object at 0x1122415d0&amp;gt;,
 &#39;data&#39;: u&#39;&#39;,
 &#39;did&#39;: 1,
 &#39;due&#39;: -1,
 &#39;factor&#39;: 2350,
 &#39;flags&#39;: 0,
 &#39;id&#39;: 1307820012852L,
 [...]
}

&amp;gt;&amp;gt;&amp;gt; pp(bcard()) # ブラウザで選択したカードへのショートカット
&amp;lt;as above&amp;gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;何が評価されたか知るためには、式を明示的に出力する必要があることに注意してください。Anki では
pp() (pretty print) がスコープの中でオブジェクトの詳細を素早くダンプすることが簡単に
できるようになっています。ショートカット ctrl+shift+return は上の欄中の現在のテキストを
pp() で囲んで実行し結果を表示します。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Linux を使っているかソースコードから Anki を実行している場合は、自分のスクリプトを pdb を
使ってデバッグすることも可能です。次の行を自分のコードのどこかに置けば、Anki がその場所に
達するとターミナルにデバッガーが立ち上がります。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;from aqt.qt import debug; debug()&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;別の方法としては、export DEBUG=1 と自分のシェルで実行すれば、補足していない例外個所で
デバッガーが立ち上がります。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_もっと詳しく学びたい場合には&#34;&gt;もっと詳しく学びたい場合には&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;anki と aqt の両方が &lt;a href=&#34;http://github.com/dae/&#34; class=&#34;bare&#34;&gt;http://github.com/dae/&lt;/a&gt; で入手できます。コレクション
オブジェクトは、anki の collection.py の中で定義されています。他に調べる価値のある
ファイルは、cards.py、notes.py、sched.py、models.py や decks.py です。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;aqt のソースコード見ることも、特定の処理のための anki の呼び出し方や GUI の詳細
を理解するのに役立ちます。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;多くの GUI は、designer ファイルの中で定義されてます。Qt Designer というプログラムを
使えば .ui ファイルを開いて、GUI をブラウズすることが簡単にできます。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;最後になりますが、他のアドオンが何かを実現している方法を見ることも、非常に役立ちます。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_anki_1_2_プラグインからの移植&#34;&gt;Anki 1.2 プラグインからの移植&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;注意すべき主な変更点:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;テーブルの変更: facts&amp;#8594;notes、reviewHistory&amp;#8594;revlog&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;フィールドは、現在 notes テーブルに &#39;flds&#39; という単体のテキストフィールドに保存している。
各フィールドは \x1f で区切られている。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cardTags テーブルを廃止しました。以前と同様の方法で検索するには
col.findCards(&#34;tag:x note:y card:z&#34;) をお使いください。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;スケジュールのコードは全て sched.py にあります。単語帳のコードは collection.py です。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;notes テーブルを一括更新する場合は、findReplace() を使わないでください。
必ず col.updateFieldCache() を呼び出してください。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Q/A キャッシュを廃止しました。このため質問か解答を生成していないカードの中を
テキスト検索することはできません。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;変更の前にコレクションを保存するには、古いアンドゥ (元に戻す) システムの代わりに
mw.checkpoint(&#34;Undo Name&#34;) を呼び出してください。ユーザーが操作をやり直す場合、
保存済みの状態に戻ります。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;変更の同期を確実にするには、ノートやカードをデータベース内で修正した場合に、mod の更新と
usn が col.usn() に設定を必ず行ってください。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;同様に、モデルや単語帳を修正した場合は、適切なマネージャで必ず save() を呼んでください。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;タイマーを設定する場合は、mw.progress.timer() を使って、データベース処理の最中に
タイマーが起動することが決して起らないようにしてください。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;stats テーブルを廃止しました。同期中のマージはできなくなりました。統計は revlog
テーブルから引き出す必要があります。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_アドオンの共有&#34;&gt;アドオンの共有&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;単純な一つのファイルからなるアドオンは、その .py をアップロードできます。複数のファイルの
アドオンは、Python パッケージとして動作するようにサブホルダーを作って、パッケージを読み込む
小さな .py ファイルを作ってください。Japanese support アドオンを使って説明しますと
次のような構造になります。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;literalblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;japanese/file1.py
japanese/file2.py
japanese/__init__.py # 空も可能。このフォルダーがパッケージであることを示す
japanese/&amp;lt;バイナリーのサポートファイル&amp;gt;
jp.py&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;複数ファイルのアドオンをアップロードするには、フォルダーとローダー .py ファイルを zip
ファイルにして、その zip ファイルをアップロードしてください。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://ankiweb.net/shared/addons/&#34; class=&#34;bare&#34;&gt;https://ankiweb.net/shared/addons/&lt;/a&gt; にアドオンをアップロードしてください。&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_日本語版訳注&#34;&gt;日本語版訳注&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Anki 2 の変更点を知るには、&lt;a href=&#34;http://rs.luminousspice.com/changeinanki2/&#34;&gt;Anki 2の変更点&lt;/a&gt; が役立ちます。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;更に、アプリケーションの個々の機能や処理を詳しく理解するには &lt;a href=&#34;http://ankisrs.net/docs/manual.html&#34;&gt;Anki User Manual&lt;/a&gt; をご覧ください。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Anki 2.0.46 現在、Anki に同梱している Python のバージョンは &lt;code&gt;2.7.6&lt;/code&gt; です。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;アドオン開発の簡単なチュートリアルとして &lt;a href=&#34;http://rs.luminousspice.com/how_to_create_anki_add-ons/&#34;&gt;フックを使った Anki アドオンのつくり方&lt;/a&gt;を用意しました。この記事を補足して独自フックの追加してアドオンを作成する方法や、作成したアドオンを AnkiWeb のアドオン一覧へ登録する方法について説明しています。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_次期バージョン_anki_2_1_について&#34;&gt;次期バージョン Anki 2.1 について&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Anki 2.1 Beta 11 現在、Anki に同梱している Python のバージョンは &lt;code&gt;3.6.1&lt;/code&gt; です。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;既存のアドオンを Anki 2.1 対応へ移行するために必要な情報は、Anki のソースコードに同梱している &lt;a href=&#34;https://github.com/dae/anki/blob/master/README.addons&#34;&gt;README.addons&lt;/a&gt; で詳しく解説しています。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_日本語版更新履歴&#34;&gt;日本語版更新履歴&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;2012/09/16 Anki 2 Release Candidate 4 準拠 (2012/09/08版)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2013/02/03 Anki 2.0.5 準拠 (2012/12/20版)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2013/05/07 Anki 2.0.8 準拠 (2013/05/07版)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2013/06/07 Anki 2.0.8 準拠 (2013/05/13版)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2014/02/15 Anki 2.0.22 準拠 (2014/02/14版)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2016/05/01 Anki 2.0.33 準拠 (2016/03/04版)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2017/07/28 Anki 2.1 Beta 3 準拠 (2017/07/14版)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2017/08/15 Anki 2.1 Beta 11 準拠 (2017/08/15版)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
    </item>
    
  </channel>
</rss>
